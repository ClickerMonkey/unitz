{"version":3,"sources":["unitz.min.js"],"names":["root","factory","define","amd","module","exports","Unitz","this","isString","x","isObject","isNumber","isNaN","isArray","Array","removeUnit","unit","removed","unitToClass","removeGroup","isSingular","Math","abs","epsilon","isWhole","floor","isHeuristicMatch","unitA","unitB","substring","heuristicLength","createNormal","value","splitInput","input","split","separator","parseInput","parse","UnitzParsed","fromNumber","group","regex","exec","whole","numer","denom","decimal","toLowerCase","parseInt","sign","parseFloat","compound","unitsAllowed","parsed","unitClass","groups","i","length","grp","indexOf","converted","convert","denoms","denominators","k","den","num","actual","part","push","join","normal","best","returnFraction","largestDenominator","closest","closestGroup","fraction","valid","better","closeApprox","distance","closeString","string","closeActual","getUnit","addUnit","converters","groupMap","baseFrom","bases","baseTo","mapping","findUnit","units","singular","chosen","u","combine","inputA","inputB","splitA","splitB","splitBoth","concat","parsedInput","a","b","splice","combined","parsedBest","separatorJoin","subtract","allowNegatives","conversions","min","max","UnitzFraction","UnitzConversion","addClass","classMap","className","classes","UnitzClass","UnitzGroup","mainUnit","baseUnit","baseScale","plural","roundDown","denominator","numerator","round","signdis","dis","ceil","remainder","shortUnit","longUnit","friendly","shortNormal","longNormal","prototype","addGroup","relativeValue","relativeTo","exists","index","addOneBaseConversion","source","target","addBaseConversion","to","withUnit","classlessDenominators","groupDenominators","fractionDenominators","number","uc","Class","Group","Parsed","Fraction"],"mappings":"CAEC,SAAUA,EAAMC,GAEO,kBAAXC,SAAyBA,OAAOC,IAGzCD,UAAWD,GAEc,gBAAXG,SAAuBA,OAAOC,QAK5CD,OAAOC,QAAUJ,IAKjBD,EAAKM,MAAQL,KAEfM,KAAM,WAyDR,QAASC,GAASC,GAEhB,MAAoB,gBAANA,GAGhB,QAASC,GAASD,GAEhB,MAAa,QAANA,GAA2B,gBAANA,GAG9B,QAASE,GAASF,GAEhB,MAAoB,gBAANA,KAAmBG,MAAMH,GAGzC,QAASI,GAAQJ,GAEf,MAAOA,aAAaK,OActB,QAASC,GAAWC,GAElB,GAAIC,IAAU,CAOd,OALKD,KAAQE,KAEXD,EAAUC,EAAaF,GAAOD,WAAYC,IAGrCC,EAeT,QAASE,GAAYH,GAEnB,GAAIC,IAAU,CAOd,OALKD,KAAQE,KAEXD,EAAUC,EAAaF,GAAOG,YAAaH,IAGtCC,EAcT,QAASG,GAAWX,GAElB,MAAOE,GAAUF,IAAOY,KAAKC,IAAKD,KAAKC,IAAKb,GAAM,GAAMH,EAAMiB,QAYhE,QAASC,GAAQf,GAEf,MAAOE,GAAUF,IAAOY,KAAKC,IAAKD,KAAKI,MAAOhB,GAAMA,GAAM,KAuB5D,QAASiB,GAAiBC,EAAOC,GAE/B,MAAOD,GAAME,UAAW,EAAGvB,EAAMwB,mBAAsBF,EAAMC,UAAW,EAAGvB,EAAMwB,iBAenF,QAASC,GAAaC,EAAOhB,GAE3B,MAAOA,GAAOgB,EAAQ,IAAMhB,EAAOgB,EAcrC,QAASC,GAAWC,GAElB,MAAK1B,GAAU0B,GAENA,EAAMC,MAAO7B,EAAM8B,WAEvBvB,EAASqB,GAELA,EAEJxB,EAAUwB,IAAWvB,EAAUuB,IAEzBA,MAgBb,QAASG,GAAWH,GAElB,MAAK1B,GAAU0B,GAENI,EAAOJ,GAEXxB,EAAUwB,GAENA,EAEJvB,EAAUuB,GAENK,EAAYC,WAAYN,IAG1B,EAwBT,QAASI,GAAMJ,GAEb,GAAIO,GAAQnC,EAAMoC,MAAMC,KAAMT,GAC1BU,EAAQH,EAAM,GACdI,EAAQJ,EAAM,GACdK,EAAQL,EAAM,GACdM,EAAUN,EAAM,GAChBzB,EAAOyB,EAAM,GAAGO,aAEpB,KAAMJ,IAAUG,IAAY/B,EAE1B,OAAO,CAGT,IAAIgB,GAAQ,CAEZ,IAAKY,EACL,CACEZ,EAAQiB,SAAUL,EAElB,IAAIM,GAAgB,EAARlB,EAAY,GAAK,CAExBc,IAEHA,EAAQG,SAAUH,GAEbD,EAEHb,GAAWiB,SAAUJ,GAAUC,EAAUI,EAIzClB,GAASc,GAGHC,IAERf,GAASmB,WAAY,KAAOJ,GAAYG,GAI5C,MAAO,IAAIX,GAAaP,EAAOhB,EAAME,EAAaF,GAAQkB,GA2B5D,QAASkB,GAASlB,EAAOmB,GAEvB,GAAIC,GAASjB,EAAYH,GACrBkB,IAEJ,IAAKE,EAAOC,WAAaD,EAAOb,MAI9B,IAAK,GAFDe,GAASF,EAAOC,UAAUC,OAErBC,EAAID,EAAOE,OAAS,EAAGD,GAAK,EAAGA,IACxC,CACE,GAAIE,GAAMH,EAAQC,EAGlB,KAAMJ,GAAqD,KAArCA,EAAaO,QAASD,EAAI3C,MAM9C,IAAK,GAJD6C,GAAYP,EAAOQ,QAASH,EAAI3C,MAChC+C,EAASJ,EAAIK,aAGRC,EAAI,EAAGA,EAAIF,EAAOL,OAAQO,IACnC,CACE,GAAIC,GAAMH,EAAQE,GACdE,EAAM9C,KAAKI,MAAOyC,EAAML,EAI5B,IAAKM,GAAO,EACZ,CACE,GAAIC,GAASD,EAAMD,EACftB,EAAQvB,KAAKI,MAAO2C,GAEpBC,EAAO,EAENzB,IAAS,IAEZyB,GAAQzB,EACRuB,GAAOvB,EAAQsB,GAGZC,EAAM,GAAKD,EAAM,IAEpBG,IAASA,EAAKX,OAAS,EAAI,IAAM,IAAMS,EAAM,IAAMD,GAGrDG,EAAOtC,EAAcsC,EAAMV,EAAI3C,MAE/BoC,EAASkB,KAAMD,GAEff,EAAOtB,OAAS8B,EAASO,EAAMf,EAAOtC,KAEtC,SAOV,MAAOoC,GAASM,OAASN,EAASmB,KAAM,MAASjB,EAAOkB,OA4B1D,QAASC,GAAKvC,EAAOwC,EAAgBC,GAEnC,GAAIrB,GAASjB,EAAYH,EAEzB,IAAKoB,EAAOC,UACZ,CAQE,IAAK,GAJDqB,GAAU,KACVC,EAAe,KACfrB,EAASF,EAAOC,UAAUC,OAErBC,EAAI,EAAGA,EAAID,EAAOE,OAAQD,IACnC,CACE,GAAIE,GAAMH,EAAQC,GACdqB,EAAWxB,EAAOQ,QAASH,EAAI3C,MAAM,EAEzC,IAAK8D,EAASC,MACd,CACE,GAAIC,IAAUJ,CAEd,IAAKA,EACL,CACE,GAAIK,GAAcH,EAASI,UAAYN,EAAQM,SAC3CC,EAAcL,EAASM,OAAO1B,QAAUkB,EAAQQ,OAAO1B,OACvD2B,GAAeP,EAASV,OAAS,IAAIV,SAAWkB,EAAQR,OAAS,IAAIV,MAEpEuB,KAAgBP,EAAiBS,EAAcE,KAElDL,GAAS,GAIRA,IAEHJ,EAAUE,EACVD,EAAelB,IAKhBiB,IAEEtB,IAAWpB,EAEdoB,EAAS,GAAIf,GAAaqC,EAAQR,OAAQS,EAAa7D,KAAMsC,EAAOC,YAIpED,EAAOtB,MAAQ4C,EAAQR,OACvBd,EAAOtC,KAAO6D,EAAa7D,KAC3BsC,EAAOb,MAAQoC,GAGjBvB,EAAOkB,OAASE,EACd3C,EAAc6C,EAAQQ,OAAQP,EAAaS,QAASV,EAAQxD,eAC5DyD,EAAaU,QAASX,EAAQR,SAIpC,MAAOd,GAqBT,QAASQ,GAAQ5B,EAAOlB,GAEtB,GAAIsC,GAASjB,EAAYH,EAGzB,KAAMxB,EAAU4C,GAEd,OAAO,CAGT,IAAItB,GAAQsB,EAAOtB,MACfuB,EAAYD,EAAOC,SAGvB,KAAMA,IAAcvC,EAElB,MAAOgB,EAIT,MAAMuB,GAAevC,IAAQuC,GAAUiC,YAErC,OAAO,CAIT,IAAKjC,EAAUkC,SAAUzE,KAAWuC,EAAUkC,SAAUnC,EAAOtC,MAE7D,MAAOgB,EAITA,IAASuB,EAAUiC,WAAYlC,EAAOtC,KAGtC,IAAI0E,GAAWnC,EAAUoC,MAAOrC,EAAOtC,MACnC4E,EAASrC,EAAUoC,MAAO3E,EAU9B,OARK0E,KAAaE,IAEhB5D,GAASuB,EAAUsC,QAASH,GAAYE,IAI1C5D,GAASuB,EAAUiC,WAAYxE,GAkBjC,QAAS8E,GAASC,EAAOC,GAIvB,IAAK,GAFDC,GAAS,GAEJxC,EAAI,EAAGA,EAAIsC,EAAMrC,OAAQD,IAClC,CACE,GAAIyC,GAAIH,EAAOtC,EAEVyC,GAAExC,SAAsB,KAAXuC,GAAkBD,GAAYE,EAAExC,OAASuC,EAAOvC,SAAasC,GAAYE,EAAExC,OAASuC,EAAOvC,UAE3GuC,EAASC,GAIb,MAAOD,GA4BT,QAASE,GAAQC,EAAQC,EAAQvB,EAAUH,GAQzC,IAAK,GAND2B,GAASrE,EAAYmE,GACrBG,EAAStE,EAAYoE,GACrBG,EAAYF,EAAOG,OAAQF,GAC3BjD,KAGKG,EAAI,EAAGA,EAAI+C,EAAU9C,OAAQD,IACtC,CACE,GAAIiD,GAAcrE,EAAYmE,EAAW/C,GAEpCiD,MAAgB,IAEnBA,EAAYX,SACZW,EAAYX,MAAMzB,KAAMoC,EAAY1F,MACpCsC,EAAOgB,KAAMoC,IAKjB,IAAK,GAAIjD,GAAI,EAAGA,EAAIH,EAAOI,OAAS,EAAGD,IAIrC,IAAK,GAFDkD,GAAIrD,EAAQG,GAEPQ,EAAIX,EAAOI,OAAS,EAAGO,EAAIR,EAAGQ,IACvC,CACE,GAAI2C,GAAItD,EAAQW,GACZJ,EAAY+C,EAAE9C,QAAS6C,EAAE3F,KAGxB6C,MAAc,GAAS8C,EAAElE,OAE5Ba,EAAOuD,OAAQ5C,EAAG,GAElB0C,EAAE3E,OAAS6B,GAGF8C,EAAE3F,MAAS4F,EAAE5F,KAQdU,EAAkBiF,EAAE3F,KAAM4F,EAAE5F,QAEpCsC,EAAOuD,OAAQ5C,EAAG,GAElB0C,EAAE3E,OAAS4E,EAAE5E,MACb2E,EAAEZ,MAAQY,EAAEZ,MAAMU,OAAQG,EAAEb,SAX5BzC,EAAOuD,OAAQ5C,EAAG,GAElB0C,EAAE3E,OAAS4E,EAAE5E,MACb2E,EAAEZ,MAAQY,EAAEZ,MAAMU,OAAQG,EAAEb,QAelC,IAAK,GAFDe,MAEKrD,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IACnC,CACE,GAAIkD,GAAIrD,EAAQG,EAEXkD,GAAElE,MAELkE,EAAEnC,OAASmC,EAAElE,MAAM8C,QAASoB,EAAE3E,QAI9B2E,EAAE3F,KAAO8E,EAAUa,EAAEZ,MAAO3E,EAAYuF,EAAE3E,QAC1C2E,EAAEnC,OAASzC,EAAc4E,EAAE3E,MAAO2E,EAAE3F,MAGtC,IAAI+F,GAAatC,EAAMkC,EAAG7B,EAAUH,EAE/BoC,IAAcA,EAAWvC,QAE5BsC,EAASxC,KAAMyC,EAAWvC,QAI9B,MAAOsC,GAASvC,KAAMjE,EAAM0G,eAgC9B,QAASC,GAASb,EAAQC,EAAQa,EAAgBpC,EAAUH,GAQ1D,IAAK,GAND2B,GAASrE,EAAYmE,GACrBG,EAAStE,EAAYoE,GACrBG,EAAYF,EAAOG,OAAQF,GAC3BjD,KAGKG,EAAI,EAAGA,EAAI+C,EAAU9C,OAAQD,IACtC,CACE,GAAIiD,GAAcrE,EAAYmE,EAAW/C,GAEpCiD,MAAgB,IAEnBA,EAAYxD,KAAOO,GAAK6C,EAAO5C,OAAS,GAAK,EAC7CgD,EAAYX,SACZW,EAAYX,MAAMzB,KAAMoC,EAAY1F,MACpCsC,EAAOgB,KAAMoC,IAKjB,IAAK,GAAIjD,GAAI,EAAGA,EAAIH,EAAOI,OAAS,EAAGD,IAIrC,IAAK,GAFDkD,GAAIrD,EAAQG,GAEPQ,EAAIX,EAAOI,OAAS,EAAGO,EAAIR,EAAGQ,IACvC,CACE,GAAI2C,GAAItD,EAAQW,GACZJ,EAAY+C,EAAE9C,QAAS6C,EAAE3F,MACzBkC,EAAO0D,EAAE1D,KAAOyD,EAAEzD,IAGjBW,MAAc,GAAS8C,EAAElE,OAE5Ba,EAAOuD,OAAQ5C,EAAG,GAElB0C,EAAE3E,OAAS6B,EAAYX,GAGdyD,EAAE3F,MAAS4F,EAAE5F,KAQdU,EAAkBiF,EAAE3F,KAAM4F,EAAE5F,QAEpCsC,EAAOuD,OAAQ5C,EAAG,GAElB0C,EAAE3E,OAAS4E,EAAE5E,MAAQkB,EACrByD,EAAEZ,MAAQY,EAAEZ,MAAMU,OAAQG,EAAEb,SAX5BzC,EAAOuD,OAAQ5C,EAAG,GAElB0C,EAAE3E,OAAS4E,EAAE5E,MAAQkB,EACrByD,EAAEZ,MAAQY,EAAEZ,MAAMU,OAAQG,EAAEb,QAelC,IAAK,GAFDe,MAEKrD,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IACnC,CACE,GAAIkD,GAAIrD,EAAQG,EAEhB,MAAMkD,EAAE3E,MAAQ,GAAK2E,EAAEzD,KAAO,IAAOgE,EAArC,CAKKP,EAAElE,MAELkE,EAAEnC,OAASmC,EAAElE,MAAM8C,QAASoB,EAAE3E,QAI9B2E,EAAE3F,KAAO8E,EAAUa,EAAEZ,MAAO3E,EAAYuF,EAAE3E,QAC1C2E,EAAEnC,OAASzC,EAAc4E,EAAE3E,MAAO2E,EAAE3F,MAGtC,IAAI+F,GAAatC,EAAMkC,EAAG7B,EAAUH,EAE/BoC,IAAcA,EAAWvC,QAE5BsC,EAASxC,KAAMyC,EAAWvC,SAI9B,MAAOsC,GAASvC,KAAMjE,EAAM0G,eA2B9B,QAASG,GAAYjF,EAAOkF,EAAKC,EAAK1C,GAEpC,GAAIrB,GAASjB,EAAYH,EAEzB,KAAMxB,EAAU4C,KAAaA,EAAOC,UAElC,MAAOrB,EAMT,KAAK,GAHDsB,GAASF,EAAOC,UAAUC,OAC1B2D,EAAc7D,EAAO6D,eAEhB1D,EAAI,EAAGA,EAAID,EAAOE,OAAQD,IACnC,CACE,GAAIE,GAAMH,EAAQC,GACdI,EAAYP,EAAOQ,QAASH,EAAI3C,KAEpC,IAAML,EAAUkD,MAKXlD,EAAUyG,IAAqBA,EAAZvD,GAKnBlD,EAAU0G,IAASxD,EAAYwD,GAApC,CAKA,GAAIvC,GAAW,GAAIwC,GAAezD,EAAWF,EAAIK,aAAcW,EAE/DwC,GAAY7C,KAAK,GAAIiD,GAAiB1D,EAAWiB,EAAUnB,KAG7D,MAAOL,GAWT,QAASkE,GAASjE,GAEhBkE,EAAUlE,EAAUmE,WAAcnE,EAClCoE,EAAQrD,KAAMf,EAEd,KAAK,GAAIvC,KAAQuC,GAAUiC,WAEzBtE,EAAaF,GAASuC,EAkB1B,QAASqE,GAAWF,GAOlBnH,KAAKmH,UAAYA,EAOjBnH,KAAKiF,cAULjF,KAAKsF,WAOLtF,KAAKoF,SAOLpF,KAAKiD,UAOLjD,KAAKkF,YAmNP,QAASoC,GAAWC,EAAUC,EAAUC,EAAWjC,EAAOC,EAAUiC,EAAQjE,GAQ1EzD,KAAKS,KAAO8G,EAOZvH,KAAKwH,SAAWA,EAOhBxH,KAAKyH,UAAYA,EAQjBzH,KAAKwF,MAAQA,EAObxF,KAAKyF,SAAWA,EAOhBzF,KAAK0H,OAASA,EAQd1H,KAAKyD,aAAeA,EA0EtB,QAASzB,GAAYP,EAAOhB,EAAMuC,EAAWiB,GAO3CjE,KAAKyB,MAAQA,EAObzB,KAAKS,KAAOA,EAOZT,KAAKgD,UAAYA,EAOjBhD,KAAKkC,MAAQc,EAAYA,EAAUkC,SAAUzE,GAAS,KAStDT,KAAKiE,OAASjE,KAAKkC,MAAQlC,KAAKkC,MAAM8C,QAASvD,GAAUwC,EA6L3D,QAAS8C,GAActF,EAAOgC,EAAcW,EAAoBuD,GAM9D,IAAK,GAJDhD,GAAW7D,KAAKC,IAAKD,KAAKI,MAAOO,GAAUA,GAC3CmG,EAAc,EACdC,EAAYpG,EAEPyB,EAAI,EAAGA,EAAIO,EAAaN,QAAUwB,EAAW5E,EAAMiB,QAASkC,IACrE,CACE,GAAIS,GAAMF,EAAcP,GACpBU,EAAM9C,KAAKgH,MAAOrG,EAAQkC,GAC1BoE,EAAUnE,EAAMD,EAAMlC,EACtBuG,EAAMlH,KAAKC,IAAKgH,EAEpB,IAAK3H,EAAUgE,IAAwBT,EAAMS,EAE3C,KAGGuD,IAAaI,EAAU,GAKvBC,EAAMjI,EAAMiB,QAAU2D,IAEzBiD,EAAcjE,EACdkE,EAAYjE,EACZe,EAAWqD,GASfhI,KAAKyB,MAAQA,EASbzB,KAAK6H,UAAYA,EASjB7H,KAAK4H,YAAcA,EAOnB5H,KAAK6D,OAASgE,EAAYD,EAQ1B5H,KAAK2E,SAAWA,EAQhB3E,KAAKqC,MAAQrC,KAAK6D,OAAS,EAAI/C,KAAKmH,KAAMjI,KAAK6D,QAAW/C,KAAKI,MAAOlB,KAAK6D,QAQ3E7D,KAAKkI,UAAYpH,KAAKC,IAAKD,KAAKgH,OAAQrG,EAAQzB,KAAKqC,OAASuF,IAS9D5H,KAAKwE,MAAwB,IAAhBoD,GAAqB3G,EAAS4G,GAU3C7H,KAAK6E,OAAS,GAEO,IAAhB+C,EAEH5H,KAAK6E,OAASgD,EAAY,GAEH,IAAf7H,KAAKqC,MAEbrC,KAAK6E,OAASgD,EAAY,IAAMD,EAEL,IAAnB5H,KAAKkI,UAEblI,KAAK6E,OAAS7E,KAAKqC,MAAQ,IAAMrC,KAAKkI,UAAY,IAAMN,EAIxD5H,KAAK6E,OAAS7E,KAAKqC,MAAQ,GA0C/B,QAAS2E,GAAgB1D,EAAWiB,EAAUrC,GAO5ClC,KAAKwC,QAAUc,EAOftD,KAAKuE,SAAWA,EAOhBvE,KAAKkC,MAAQA,EAQblC,KAAKmI,UAAYjG,EAAMzB,KAQvBT,KAAKoI,SAAW7D,EAASC,MAAQtC,EAAM6C,QAASR,EAAS1D,cAAiBqB,EAAM6C,QAASzB,GASzFtD,KAAKqI,SAAW9D,EAASC,MAAQD,EAASM,OAASvB,EAOnDtD,KAAKsI,YAAc9G,EAAcxB,KAAKqI,SAAUrI,KAAKmI,WAOrDnI,KAAKuI,WAAa/G,EAAcxB,KAAKqI,SAAUrI,KAAKoI,UAnsDtD,GAAIrI,MAyBAqH,KASAF,KASAvG,IAk3DF,OAx+BF0G,GAAWmB,WA+BTC,SAAU,SAASC,EAAeC,EAAYnD,EAAO/B,EAAcgC,EAAUiC,GAE3E,GAAIH,GAAW/B,EAAO,GAClBgC,EAAWD,CAEVoB,KAEHD,GAAiB1I,KAAKiF,WAAY0D,GAElCnB,EAAWxH,KAAKoF,MAAOuD,GAKzB,KAAK,GAFDzG,GAAQ,GAAIoF,GAAYC,EAAUC,EAAUkB,EAAelD,EAAOC,EAAUiC,EAAQjE,GAE/EP,EAAI,EAAGA,EAAIsC,EAAMrC,OAAQD,IAClC,CACE,GAAIzC,GAAO+E,EAAOtC,EAElBlD,MAAKiF,WAAYxE,GAASiI,EAC1B1I,KAAKoF,MAAO3E,GAAS+G,EACrBxH,KAAKkF,SAAUzE,GAASyB,EAK1B,MAFAlC,MAAKiD,OAAOc,KAAM7B,GAEXA,GAcT1B,WAAY,SAASC,GAEnB,GAAImI,GAASnI,IAAQT,MAAKiF,UAO1B,cALOjF,MAAKiF,WAAYxE,SACjBT,MAAKoF,MAAO3E,SACZT,MAAKkF,SAAUzE,SACfE,GAAaF,GAEbmI,GAeThI,YAAa,SAASH,GAEpB,GAAIyB,GAAQlC,KAAKkF,SAAUzE,GACvBC,GAAU,CAEd,IAAKwB,EACL,CAGE,IAAK,GAFDsD,GAAQtD,EAAMsD,MAETtC,EAAI,EAAGA,EAAIsC,EAAMrC,OAAQD,IAClC,CACE,GAAIzC,GAAO+E,EAAOtC,EAEblD,MAAKkF,SAAUzE,KAAWyB,UAEtBlC,MAAKiF,WAAYxE,SACjBT,MAAKoF,MAAO3E,SACZT,MAAKkF,SAAUzE,SACfE,GAAaF,IAIxB,GAAIoI,GAAQ7I,KAAKiD,OAAOI,QAASnB,EAElB,MAAV2G,IAEH7I,KAAKiD,OAAOqD,OAAQuC,EAAO,GAE3BnI,GAAU,GAId,MAAOA,IAiBToI,qBAAsB,SAASC,EAAQC,EAAQvH,GAEtCsH,IAAU/I,MAAKsF,UAEpBtF,KAAKsF,QAASyD,OAGhB/I,KAAKsF,QAASyD,GAAUC,GAAWvH,GAqBrCwH,kBAAmB,SAASF,EAAQC,EAAQvH,GAE1CzB,KAAK8I,qBAAsBC,EAAQC,EAAQvH,GAC3CzB,KAAK8I,qBAAsBE,EAAQD,EAAQ,EAAMtH,KA0FrD6F,EAAWkB,WAqBTxD,QAAS,SAAS9E,GAEhB,MAAOsB,GAActB,EAAGF,KAAK+E,QAAS7E,KAoBxC6E,QAAS,SAAS7E,GAEhB,MAAOW,GAAYX,GAAMF,KAAKyF,SAAWzF,KAAK0H,SAiElD1F,EAAYwG,WA8CVjF,QAAS,SAAS2F,EAAI/E,EAAgBgF,EAAU/E,EAAoBgF,EAAuBzB,GAEzF,GAAIrE,GAAYC,EAASvD,KAAMkJ,EAE/B,IAAK5F,KAAc,GAASa,EAC5B,CACE,GAAIV,GAAezD,KAAKkC,MAAQlC,KAAKkC,MAAMuB,aAAe2F,CAErD9I,GAASmD,KAEZH,EAAY,GAAIyD,GAAezD,EAAWG,EAAcW,EAAoBuD,GAEvExH,EAAUmD,IAAe6F,GAAYD,IAExC5F,EAAUuB,OAASrD,EAAc8B,EAAUuB,OAAQqE,KAUzD,MALKC,IAAY/I,EAAUkD,IAAe4F,IAExC5F,EAAY9B,EAAc8B,EAAW4F,IAGhC5F,GAcTY,KAAM,SAASC,EAAgBC,GAE7B,MAAOF,GAAMlE,KAAMmE,EAAgBC,IA4BrCG,SAAU,SAAS4E,EAAU1F,EAAcW,EAAoBuD,GAE7D,GAAI0B,GAAoBrJ,KAAKkC,MAAQlC,KAAKkC,MAAMuB,gBAC5C6F,EAAuB7F,GAAgB4F,EACvC9E,EAAW,GAAIwC,GAAe/G,KAAKyB,MAAO6H,EAAsBlF,EAAoBuD,EAOxF,OALIwB,KAEF5E,EAASM,OAASrD,EAAc+C,EAASM,OAAQ7E,KAAKS,OAGjD8D,IAcXvC,EAAYC,WAAa,SAASsH,GAEhC,MAAO,IAAIvH,GAAYuH,EAAQ,GAAI,KAAMA,EAAQ,OAyKnDxC,EAAcyB,WAcZ3H,WAAY,WAEV,MAAgD,KAAzCC,KAAKmH,KAAMnH,KAAKC,IAAKf,KAAK6D,SAAmB,EAAI,IAuF5DoD,EAAS,WAEP,GAAIuC,GAAK,GAAInC,GAAY,OAezB,OAbAmC,GAAGf,SAAU,EAAO,MAAU,OAAQ,UAAW,QAAS,MAAO,OAAQ,cAAe,kBAAmB,EAAG,EAAG,EAAG,IAAK,cAAe,iBACxIe,EAAGf,SAAU,IAAO,QAAU,OAAQ,UAAW,QAAS,MAAO,OAAQ,cAAe,gBAAiB,EAAG,EAAG,EAAG,IAAK,cAAe,eACtIe,EAAGf,SAAU,EAAO,QAAU,OAAQ,UAAW,QAAS,MAAO,OAAQ,cAAe,iBAAkB,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,cAAe,gBAC7Ie,EAAGf,SAAU,KAAO,QAAU,OAAQ,UAAW,EAAG,EAAG,EAAG,EAAG,IAAK,OAAQ,SAC1Ee,EAAGf,SAAU,IAAO,QAAU,OAAQ,UAAW,QAAS,MAAO,OAAQ,cAAe,iBAAkB,EAAG,EAAG,EAAG,EAAG,IAAK,cAAe,gBAE1Ie,EAAGf,SAAU,EAAO,MAAU,OAAQ,UAAW,QAAS,MAAO,OAAQ,oBAAqB,uBAAwB,EAAG,EAAG,EAAG,IAAK,oBAAqB,sBACzJe,EAAGf,SAAU,IAAO,QAAU,OAAQ,UAAW,QAAS,MAAO,OAAQ,oBAAqB,uBAAwB,EAAG,EAAG,EAAG,IAAK,oBAAqB,sBACzJe,EAAGf,SAAU,IAAO,QAAU,MAAO,SAAU,OAAQ,KAAM,MAAO,eAAgB,kBAAmB,EAAG,EAAG,EAAG,IAAK,eAAgB,iBACrIe,EAAGf,SAAU,IAAS,OAAQ,OAAQ,UAAW,QAAS,MAAO,OAAQ,mBAAoB,sBAAuB,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,mBAAoB,qBAE5Je,EAAGP,kBAAmB,OAAQ,OAAQ,QAE/BO,MAKTvC,EAAS,WAEP,GAAIuC,GAAK,GAAInC,GAAY,UA0CzB,OAxCAmC,GAAGf,SAAU,EAAO,MAAS,MAAO,WAAa,MAAO,QACxDe,EAAGf,SAAU,EAAO,OAAU,SAAU,UAAW,SAAU,QAAS,YAAa,YAAa,UAAW,aAAc,UAAW,cAAgB,SAAU,WAC9Je,EAAGf,SAAU,EAAO,OAAU,IAAK,OAAQ,UAAW,EAAG,GAAI,OAAQ,SAErEe,EAAGf,SAAU,IAAO,KAAU,KAAM,WAAY,cAAe,EAAG,EAAG,EAAG,IAAK,WAAY,aACzFe,EAAGf,SAAU,IAAO,MAAU,KAAM,WAAY,cAAe,EAAG,EAAG,EAAG,IAAK,WAAY,aACzFe,EAAGf,SAAU,IAAO,MAAU,KAAM,WAAY,cAAe,EAAG,EAAG,EAAG,IAAK,WAAY,aACzFe,EAAGf,SAAU,IAAO,MAAU,KAAM,WAAY,cAAe,EAAG,EAAG,EAAG,IAAK,WAAY,aACzFe,EAAGf,SAAU,IAAO,MAAU,KAAM,WAAY,cAAe,EAAG,EAAG,EAAG,IAAK,WAAY,aACzFe,EAAGf,SAAU,IAAO,MAAU,KAAM,UAAW,aAAc,EAAG,EAAG,EAAG,IAAK,UAAW,YACtFe,EAAGf,SAAU,IAAO,MAAU,KAAM,YAAa,eAAgB,EAAG,EAAG,EAAG,IAAK,YAAa,cAC5Fe,EAAGf,SAAU,IAAO,MAAU,KAAM,YAAa,eAAgB,EAAG,EAAG,EAAG,IAAK,YAAa,cAE5Fe,EAAGf,SAAU,KAAO,KAAU,MAAO,WAAY,cAAe,EAAG,EAAG,EAAG,IAAK,WAAY,aAC1Fe,EAAGf,SAAU,KAAO,OAAU,MAAO,WAAY,cAAe,EAAG,EAAG,EAAG,IAAK,WAAY,aAC1Fe,EAAGf,SAAU,KAAO,OAAU,MAAO,WAAY,cAAe,EAAG,EAAG,EAAG,IAAK,WAAY,aAC1Fe,EAAGf,SAAU,KAAO,OAAU,MAAO,WAAY,cAAe,EAAG,EAAG,EAAG,IAAK,WAAY,aAC1Fe,EAAGf,SAAU,KAAO,OAAU,MAAO,WAAY,cAAe,EAAG,EAAG,EAAG,IAAK,WAAY,aAC1Fe,EAAGf,SAAU,KAAO,OAAU,MAAO,WAAY,cAAe,EAAG,EAAG,EAAG,IAAK,WAAY,aAC1Fe,EAAGf,SAAU,KAAO,OAAU,MAAO,WAAY,cAAe,EAAG,EAAG,EAAG,IAAK,WAAY,aAC1Fe,EAAGf,SAAU,KAAO,OAAU,MAAO,WAAY,cAAe,EAAG,EAAG,EAAG,IAAK,WAAY,aAE1Fe,EAAGf,SAAU,IAAO,OAAU,OAAQ,UAAW,aAAc,EAAG,EAAG,EAAG,IAAK,UAAW,YACxFe,EAAGf,SAAU,IAAO,QAAU,OAAQ,UAAW,aAAc,EAAG,EAAG,EAAG,IAAK,UAAW,YACxFe,EAAGf,SAAU,IAAO,QAAU,OAAQ,UAAW,aAAc,EAAG,EAAG,EAAG,IAAK,UAAW,YACxFe,EAAGf,SAAU,IAAO,QAAU,OAAQ,UAAW,aAAc,EAAG,EAAG,EAAG,IAAK,UAAW,YACxFe,EAAGf,SAAU,IAAO,QAAU,OAAQ,UAAW,aAAc,EAAG,EAAG,EAAG,IAAK,UAAW,YACxFe,EAAGf,SAAU,IAAO,QAAU,OAAQ,SAAU,YAAa,EAAG,EAAG,EAAG,IAAK,SAAU,WACrFe,EAAGf,SAAU,IAAO,QAAU,OAAQ,WAAY,cAAe,EAAG,EAAG,EAAG,IAAK,WAAY,aAC3Fe,EAAGf,SAAU,IAAO,QAAU,OAAQ,WAAY,cAAe,EAAG,EAAG,EAAG,IAAK,WAAY,aAE3Fe,EAAGf,SAAU,KAAO,OAAU,QAAS,UAAW,aAAc,EAAG,EAAG,EAAG,IAAK,UAAW,YACzFe,EAAGf,SAAU,KAAO,SAAU,QAAS,UAAW,aAAc,EAAG,EAAG,EAAG,IAAK,UAAW,YACzFe,EAAGf,SAAU,KAAO,SAAU,QAAS,UAAW,aAAc,EAAG,EAAG,EAAG,IAAK,UAAW,YACzFe,EAAGf,SAAU,KAAO,SAAU,QAAS,UAAW,aAAc,EAAG,EAAG,EAAG,IAAK,UAAW,YACzFe,EAAGf,SAAU,KAAO,SAAU,QAAS,UAAW,aAAc,EAAG,EAAG,EAAG,IAAK,UAAW,YACzFe,EAAGf,SAAU,KAAO,SAAU,QAAS,UAAW,aAAc,EAAG,EAAG,EAAG,IAAK,UAAW,YACzFe,EAAGf,SAAU,KAAO,SAAU,QAAS,UAAW,aAAc,EAAG,EAAG,EAAG,IAAK,UAAW,YACzFe,EAAGf,SAAU,KAAO,SAAU,QAAS,UAAW,aAAc,EAAG,EAAG,EAAG,IAAK,UAAW,YAElFe,MAKTvC,EAAS,WAEP,GAAIuC,GAAK,GAAInC,GAAY,SAgBzB,OAdAmC,GAAGf,SAAU,EAAO,MAAS,KAAM,OAAQ,SAAU,MAAO,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,OAAQ,UACzFe,EAAGf,SAAU,GAAO,MAAS,KAAM,OAAQ,OAAQ,MAAO,EAAG,EAAG,EAAG,IAAK,OAAQ,QAChFe,EAAGf,SAAU,EAAO,MAAS,KAAM,MAAO,OAAQ,UAAW,GAAI,OAAQ,SACzEe,EAAGf,SAAU,KAAO,MAAS,KAAM,OAAQ,UAAW,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,OAAQ,SAC3Fe,EAAGf,SAAU,EAAO,MAAS,SAAU,YAAa,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,SAAU,WAE3Fe,EAAGf,SAAU,EAAO,MAAS,KAAM,aAAc,gBAAiB,IAAK,aAAc,eACrFe,EAAGf,SAAU,GAAO,MAAS,KAAM,aAAc,gBAAiB,EAAG,EAAG,IAAK,aAAc,eAC3Fe,EAAGf,SAAU,GAAO,MAAS,KAAM,YAAa,eAAgB,IAAK,YAAa,cAClFe,EAAGf,SAAU,IAAO,MAAS,IAAK,QAAS,WAAY,EAAG,EAAG,EAAG,EAAG,IAAK,QAAS,UACjFe,EAAGf,SAAU,IAAO,KAAS,KAAM,YAAa,eAAgB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,YAAa,cAE1Ge,EAAGP,kBAAkB,KAAM,KAAM,MAE1BO,MAKTvC,EAAS,WAEP,GAAIuC,GAAK,GAAInC,GAAY,WAOzB,OALAmC,GAAGf,SAAU,EAAO,MAAU,MAAO,OAAQ,SAAU,cAAgB,SAAU,WACjFe,EAAGf,SAAU,EAAO,MAAU,MAAO,OAAQ,SAAU,cAAgB,SAAU,WAEjFe,EAAGP,kBAAmB,MAAO,MAAO,UAE7BO,MAKTvC,EAAS,WAEP,GAAIuC,GAAK,GAAInC,GAAY,OAYzB,OAVAmC,GAAGf,SAAU,EAAW,MAAW,KAAM,aAAc,cAAe,OAAQ,UAAW,GAAI,KAAM,aAAc,eACjHe,EAAGf,SAAU,IAAW,MAAW,KAAM,cAAe,eAAgB,SAAU,UAAW,GAAI,IAAK,KAAO,cAAe,gBAC5He,EAAGf,SAAU,IAAW,MAAW,KAAM,cAAe,eAAgB,WAAY,GAAI,IAAK,KAAO,cAAe,gBACnHe,EAAGf,SAAU,IAAW,MAAW,IAAK,SAAU,UAAW,MAAO,SAAU,EAAG,GAAI,IAAK,KAAO,SAAU,WAC3Ge,EAAGf,SAAU,GAAW,KAAW,MAAO,SAAU,UAAW,SAAU,EAAG,EAAG,EAAG,IAAK,SAAU,WACjGe,EAAGf,SAAU,GAAW,OAAW,KAAM,OAAQ,QAAS,QAAS,EAAG,EAAG,EAAG,IAAK,OAAQ,SACzFe,EAAGf,SAAU,GAAW,MAAW,MAAO,SAAU,EAAG,EAAG,EAAG,EAAG,IAAK,MAAO,QAC5Ee,EAAGf,SAAU,EAAW,OAAW,KAAM,OAAQ,QAAS,QAAS,GAAI,OAAQ,SAC/Ee,EAAGf,SAAU,SAAW,OAAW,KAAM,OAAQ,QAAS,QAAS,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,OAAQ,SAEzFe,MAKTvC,EAAS,WAEP,GAAIuC,GAAK,GAAInC,GAAY,SA6BzB,OA3BAmC,GAAGf,SAAU,EAAO,MAAS,MAAO,KAAM,OAAQ,WAAY,cAAe,EAAG,EAAG,GAAI,WAAY,aACnGe,EAAGf,SAAU,EAAO,OAAS,OAAQ,QAAS,aAAc,gBAAiB,EAAG,EAAG,GAAI,aAAc,eACrGe,EAAGf,SAAU,EAAO,OAAS,KAAM,QAAS,SAAU,QAAS,QAAS,OAAQ,cAAe,UAAW,UAAW,UAAW,EAAG,EAAG,GAAI,cAAe,gBACzJe,EAAGf,SAAU,EAAO,MAAS,IAAK,MAAO,SAAU,EAAG,EAAG,GAAI,MAAO,QACpEe,EAAGf,SAAU,EAAO,KAAS,KAAM,OAAQ,UAAW,EAAG,EAAG,GAAI,OAAQ,SACxEe,EAAGf,SAAU,EAAO,KAAS,KAAM,QAAS,WAAY,EAAG,EAAG,GAAI,QAAS,UAC3Ee,EAAGf,SAAU,EAAO,MAAS,MAAO,SAAU,YAAa,EAAG,EAAG,EAAG,IAAK,SAAU,WAEnFe,EAAGf,SAAU,EAAO,MAAS,KAAM,aAAc,cAAe,aAAc,gBAAiB,EAAG,IAAK,aAAc,eACrHe,EAAGf,SAAU,GAAO,MAAS,KAAM,aAAc,cAAe,aAAc,gBAAiB,IAAK,aAAc,eAClHe,EAAGf,SAAU,IAAO,MAAS,IAAK,QAAS,SAAU,QAAS,WAAY,EAAG,EAAG,EAAG,IAAK,QAAS,UACjGe,EAAGf,SAAU,GAAO,KAAS,KAAM,YAAa,aAAc,YAAa,eAAgB,GAAI,KAAM,YAAa,cAClHe,EAAGf,SAAU,IAAO,KAAS,KAAM,YAAa,aAAc,YAAa,eAAgB,GAAI,KAAM,YAAa,cAElHe,EAAGf,SAAU,EAAO,MAAS,MAAO,OAAQ,WAAY,mBAAoB,sBAAuB,EAAG,EAAG,GAAI,mBAAoB,qBACjIe,EAAGf,SAAU,IAAO,OAAS,MAAO,OAAQ,WAAY,mBAAoB,sBAAuB,EAAG,EAAG,GAAI,mBAAoB,qBACjIe,EAAGf,SAAU,IAAS,OAAQ,KAAM,MAAO,UAAW,cAAe,iBAAkB,EAAG,EAAG,GAAI,cAAe,gBAChHe,EAAGf,SAAU,IAAY,MAAO,MAAO,OAAQ,WAAY,QAAS,WAAY,EAAG,EAAG,GAAI,QAAS,UAEnGe,EAAGf,SAAU,EAAO,MAAS,MAAO,OAAQ,WAAY,aAAc,iBAAkB,EAAG,EAAG,GAAI,aAAc,gBAChHe,EAAGf,SAAU,KAAO,OAAS,MAAO,OAAQ,WAAY,aAAc,eAAgB,EAAG,EAAG,GAAI,aAAc,cAC9Ge,EAAGf,SAAU,GAAO,OAAS,MAAO,OAAQ,WAAY,aAAc,gBAAiB,EAAG,EAAG,GAAI,aAAc,eAE/Ge,EAAGP,kBAAmB,MAAO,KAAM,SACnCO,EAAGP,kBAAmB,KAAM,MAAO,GACnCO,EAAGP,kBAAmB,MAAO,MAAO,SAE7BO,MAKTvC,EAAS,WAEP,GAAIuC,GAAK,GAAInC,GAAY,SAYzB,OAVAmC,GAAGf,SAAU,EAAS,MAAW,KAAM,YAAa,eAAgB,EAAG,IAAK,YAAa,cACzFe,EAAGf,SAAU,IAAS,MAAW,IAAK,OAAQ,UAAW,EAAG,GAAI,KAAM,OAAQ,SAC9Ee,EAAGf,SAAU,IAAS,KAAW,KAAM,WAAY,YAAa,OAAQ,UAAW,EAAG,GAAI,KAAM,WAAY,aAE5Ge,EAAGf,SAAU,EAAS,MAAW,KAAM,QAAS,WAAY,EAAG,EAAG,EAAG,IAAK,QAAS,UACnFe,EAAGf,SAAU,GAAS,MAAW,KAAM,MAAO,QAAS,WAAY,EAAG,EAAG,EAAG,IAAK,QAAS,UAC1Fe,EAAGf,SAAU,IAAS,MAAW,MAAO,OAAQ,WAAY,EAAG,EAAG,EAAG,IAAK,MAAO,QAEjFe,EAAGP,kBAAmB,KAAM,KAAM,UAE3BO,MAKPzJ,EAAMqH,QAAUA,EAChBrH,EAAMmH,SAAWA,EACjBnH,EAAMY,YAAcA,EACpBZ,EAAMoC,MAAQ,uDACdpC,EAAMiB,QAAU,KAChBjB,EAAM8B,UAAY,IAClB9B,EAAM0G,cAAgB,KACtB1G,EAAMwB,gBAAkB,EAExBxB,EAAMgC,MAAQA,EACdhC,EAAM+B,WAAaA,EACnB/B,EAAMwD,QAAUA,EAChBxD,EAAMmE,KAAOA,EACbnE,EAAM2B,WAAaA,EACnB3B,EAAM6F,QAAUA,EAChB7F,EAAM2G,SAAWA,EACjB3G,EAAM8C,SAAWA,EACjB9C,EAAMoB,iBAAmBA,EACzBpB,EAAM6G,YAAcA,EACpB7G,EAAMc,WAAaA,EACnBd,EAAMkB,QAAUA,EAChBlB,EAAMwF,SAAWA,EACjBxF,EAAMkH,SAAWA,EACjBlH,EAAMS,WAAaA,EACnBT,EAAMa,YAAcA,EAEpBb,EAAM0J,MAAQpC,EACdtH,EAAM2J,MAAQpC,EACdvH,EAAM4J,OAAS3H,EACfjC,EAAM6J,SAAW7C,EAEVhH","file":"unitz.min.js","sourcesContent":["/* unitz 0.5.1 - A unit parser, converter, & combiner in JS by Philip Diffenderfer */\n// UMD (Universal Module Definition)\n(function (root, factory)\n{\n  if (typeof define === 'function' && define.amd) // jshint ignore:line\n  {\n    // AMD. Register as an anonymous module.\n    define([], factory);  // jshint ignore:line\n  }\n  else if (typeof module === 'object' && module.exports)  // jshint ignore:line\n  {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();  // jshint ignore:line\n  }\n  else\n  {\n    // Browser globals (root is window)\n    root.Unitz = factory();\n  }\n}(this, function()\n{\n\n\n/**\n * A collection of functions and classes for dealing with `number unit`\n * expressions. These expressions can be converted to other units, added,\n * subtracted, transformed to a more user friendly representation, and used to\n * generate conversions for all units in the same \"class\".\n *\n * @namespace\n */\nvar Unitz = {};\n\n/**\n * A value which can converted to a {@link Unitz.Parsed} instance.\n *\n * - `'1.5'`: A unitless value.\n * - `'1/2'`: A unitless fraction.\n * - `'2 1/3'`: A unitless fraction with a whole number.\n * - `'unit'`: A unit with a value of 1.\n * - `'0.5 unit'`: A number value with a unit.\n * - `'1/2 unit'`: A fraction with a unit.\n * - `'3 1/4 unit'`: A fraction with a whole number with a unit.\n * - `1.5`: A unitless value.\n * - `Unitz.Parsed instance`\n *\n * @typedef {String|Object|Number} parsable\n */\n\n/**\n * An array of all unit classes.\n *\n * @memberof Unitz\n * @type {Unitz.Class[]}\n * @see Unitz.addClass\n */\nvar classes = [];\n\n/**\n * A map of all unit classes where the key is their {@link Unitz.Class#className}.\n *\n * @memberof Unitz\n * @type {Object}\n * @see Unitz.addClass\n */\nvar classMap = {};\n\n/**\n * A map of all units (lowercased) to their {@link Unitz.Class}\n *\n * @memberof Unitz\n * @type {Object}\n * @see Unitz.addClass\n */\nvar unitToClass = {};\n\nfunction isString(x)\n{\n  return typeof x === 'string';\n}\n\nfunction isObject(x)\n{\n  return x !== null && typeof x === 'object';\n}\n\nfunction isNumber(x)\n{\n  return typeof x === 'number' && !isNaN(x);\n}\n\nfunction isArray(x)\n{\n  return x instanceof Array;\n}\n\n/**\n * Removes a unit from its class. The group the unit to still exists in the\n * class, but the unit won't be parsed to the group anymore.\n *\n * @method\n * @memberof Unitz\n * @param {String} unit -\n *    The lowercase unit to remove from this class.\n * @return {Boolean} -\n *    True if the unit was removed, false if it does not exist in this class.\n */\nfunction removeUnit(unit)\n{\n  var removed = false;\n\n  if ( unit in unitToClass )\n  {\n    removed = unitToClass[ unit ].removeUnit( unit );\n  }\n\n  return removed;\n}\n\n/**\n * Removes the group which has the given unit. The group will be removed\n * entirely from the system and can no longer be parsed or converted to and\n * from.\n *\n * @method\n * @memberof Unitz\n * @param {String} unit -\n *    The lowercase unit of the group to remove.\n * @return {Boolean} -\n *    True if the group was removed, false if it does not exist in this class.\n */\nfunction removeGroup(unit)\n{\n  var removed = false;\n\n  if ( unit in unitToClass )\n  {\n    removed = unitToClass[ unit ].removeGroup( unit );\n  }\n\n  return removed;\n}\n\n/**\n * Determines if the given variable is a number equivalent to one (both positive\n * and negative). This is used to determine when to use the singluar or plural\n * version of a unit.\n *\n * @memberof Unitz\n * @param {Number} x -\n *    The number to check for oneness.\n * @return {Boolean} -\n *    True if the given number is equivalent to +1 or -1.\n */\nfunction isSingular(x)\n{\n  return isNumber( x ) && Math.abs( Math.abs( x ) - 1 ) < Unitz.epsilon;\n}\n\n/**\n * Determines if the given variable is a whole number.\n *\n * @memberof Unitz\n * @param {Number} x -\n *    The number to check for wholeness.\n * @return {Boolean} -\n *    True if the given number is a whole number, otherwise false.\n */\nfunction isWhole(x)\n{\n  return isNumber( x ) && Math.abs( Math.floor( x ) - x ) < 0.00000001;\n}\n\n/**\n * Determines whether the two units are close enough a match to be considered\n * units of the same group. This is used when units are given by the user which\n * aren't known to Unitz. It determines this by comparing the first\n * {@link Unitz.heuristicLength} characters of each unit.\n *\n * ```javascript\n * Unitz.isHeuristicMatch('loaves', 'loaf'); // true\n * Unitz.isHeuristicMatch('taco', 'tacos'); // true\n * Unitz.isHeuristicMatch('pk', 'pack'); // false\n * ```\n *\n * @memberof Unitz\n * @param {String} unitA -\n *    The first unit to test.\n * @param {String} unitB -\n *    The second string to test.\n * @return {Boolean} -\n *    True if the two units are a match, otherwise false.\n */\nfunction isHeuristicMatch(unitA, unitB)\n{\n  return unitA.substring( 0, Unitz.heuristicLength ) === unitB.substring( 0, Unitz.heuristicLength );\n}\n\n/**\n * Creates a stirng representation of a value and a unit. If the value doesn't\n * have a unit then the value is returned immediately.\n *\n * @memberof Unitz\n * @param {Number|String} value -\n *    The value to add a unit to.\n * @param {String} [unit] -\n *    The unit to add to the value.\n * @return {String} -\n *    The normal representation of a value and its unit.\n */\nfunction createNormal(value, unit)\n{\n  return unit ? value + ' ' + unit : value;\n}\n\n/**\n * Converts input to an array of\n *\n * @memberof Unitz\n * @param {String|Array|Object} [input] -\n *    The input to convert to an array.\n * @return {Array} -\n *    The array of converted inputs.\n * @see Unitz.combine\n * @see Unitz.subtract\n */\nfunction splitInput(input)\n{\n  if ( isString( input ) )\n  {\n    return input.split( Unitz.separator );\n  }\n  if ( isArray( input ) )\n  {\n    return input;\n  }\n  if ( isObject( input ) || isNumber( input ) )\n  {\n    return [ input ];\n  }\n\n  return [];\n}\n\n/**\n * Parses the input and returns an instance of {@link Unitz.Parsed}. If the\n * given input cannot be parsed then `false` is returned.\n *\n * @memberof Unitz\n * @param {parsable} input -\n *    The parsable input.\n * @return {Unitz.Parsed} -\n *    The parsed instance.\n */\nfunction parseInput(input)\n{\n  if ( isString( input ) )\n  {\n    return parse( input );\n  }\n  if ( isObject( input ) )\n  {\n    return input;\n  }\n  if ( isNumber( input ) )\n  {\n    return UnitzParsed.fromNumber( input );\n  }\n\n  return false;\n}\n\n/**\n * Parses a number and unit out of the given string and returns a parsed\n * instance. If the given input is not in a valid format `false` is returned.\n *\n * ```javascript\n * Unitz.parse('1.5'); // A unitless value.\n * Unitz.parse('1/2'); // A unitless fraction.\n * Unitz.parse('2 1/3'); // A unitless fraction with a whole number.\n * Unitz.parse('unit'); // A unit with a value of 1.\n * Unitz.parse('0.5 unit'); // A number value with a unit.\n * Unitz.parse('1/2 unit'); // A fraction with a unit.\n * Unitz.parse('3 1/4 unit'); // A fraction with a whole number with a unit.\n * Unitz.parse(''); // false\n * ```\n *\n * @memberof Unitz\n * @param {String} input -\n *    The input to parse a number & unit from.\n * @return {Unitz.Parsed} -\n *    The parsed instance.\n */\nfunction parse(input)\n{\n  var group = Unitz.regex.exec( input );\n  var whole = group[1];\n  var numer = group[3];\n  var denom = group[5];\n  var decimal = group[6];\n  var unit = group[7].toLowerCase();\n\n  if ( !whole && !decimal && !unit )\n  {\n    return false;\n  }\n\n  var value = 1;\n\n  if ( whole )\n  {\n    value = parseInt( whole );\n\n    var sign = (value < 0 ? -1 : 1);\n\n    if ( denom )\n    {\n      denom = parseInt( denom );\n\n      if ( numer )\n      {\n        value += ( parseInt( numer ) / denom ) * sign;\n      }\n      else\n      {\n        value /= denom;\n      }\n    }\n    else if ( decimal )\n    {\n      value += parseFloat( '0.' + decimal ) * sign;\n    }\n  }\n\n  return new UnitzParsed( value, unit, unitToClass[ unit ], input );\n}\n\n/**\n * Parses a number and unit out of the given string and returns a human friendly\n * representation of the number and unit class - which is known as a compound\n * representation because it can contain as many units as necessary to\n * accurately describe the value. This is especially useful when you want\n * precise amounts for a fractional value.\n *\n * ```javascript\n * Unitz.compound('2 cups', ['pt', 'c']); // '1 pt'\n * Unitz.compound('2 cups', ['c', 'tbsp']); // '2 c'\n * Unitz.compound('0.625 cups', ['c', 'tbsp', 'tsp']); // '1/2 c, 2 tbsp'\n * Unitz.compound('1.342 cups', ['c', 'tbsp', 'tsp']); // '1 c, 5 tbsp, 1 tsp'\n * ```\n *\n * @memberof Unitz\n * @param {String} input -\n *    The input to parse a number & unit from.\n * @param {String[]} [unitsAllowed=false] -\n *    The units to be restricted to use. This can be used to avoid using\n *    undesirable units in the output. If this is not given, then all units for\n *    the parsed input may be used.\n * @return {String} -\n *    The compound string built from the input.\n */\nfunction compound(input, unitsAllowed)\n{\n  var parsed = parseInput( input );\n  var compound = [];\n\n  if ( parsed.unitClass && parsed.group )\n  {\n    var groups = parsed.unitClass.groups;\n\n    for (var i = groups.length - 1; i >= 0; i--)\n    {\n      var grp = groups[ i ];\n\n      // If no specific units are desired OR the current group is a desired unit...\n      if ( !unitsAllowed || unitsAllowed.indexOf( grp.unit ) !== -1 )\n      {\n        var converted = parsed.convert( grp.unit );\n        var denoms = grp.denominators;\n\n        // Try out each denominator in the given group.\n        for (var k = 0; k < denoms.length; k++)\n        {\n          var den = denoms[ k ];\n          var num = Math.floor( den * converted );\n\n          // If the numerator to the current fraction is greater than zero then\n          // use this group as the next statement in the compound string.\n          if ( num >= 1 )\n          {\n            var actual = num / den;\n            var whole = Math.floor( actual );\n\n            var part = '';\n\n            if ( whole >= 1 )\n            {\n              part += whole;\n              num -= whole * den;\n            }\n\n            if ( num > 0 && den > 1 )\n            {\n              part += (part.length > 0 ? ' ' : '') + num + '/' + den;\n            }\n\n            part = createNormal( part, grp.unit );\n\n            compound.push( part );\n\n            parsed.value -= convert( part, parsed.unit );\n\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  return compound.length ? compound.join( ', ' ) : parsed.normal;\n}\n\n/**\n * Determines the best way to represent the parsable input, optionally using\n * fractions. This will look at all units available in the parsed class and\n * use the conversion which results in the closest representation with the\n * shortest string representation favoring larger units. A {@link Unitz.Parsed}\n * instance is returned with the {@link Unitz.Parsed#normal} property set to\n * the best representation.\n *\n * ```javascript\n * Unitz.best('2 pints'); // '1 quart'\n * Unitz.best('2640 ft'); // '0.5 miles'\n * Unitz.best('2640 ft', true); // '1/2 mile'\n * ```\n *\n * @memberof Unitz\n * @param {parsable} input -\n *    The input to return the best representation of.\n * @param {Boolean} [returnFraction=false] -\n *    If the best representation should attempted to be a fraction.\n * @param {Number} [largestDenominator] -\n *    See {@link Unitz.Fraction}.\n * @return {Unitz.Parsed} -\n *    The parsed instance with the {@link Unitz.Parsed#normal} property set to\n *    the best representation.\n */\nfunction best(input, returnFraction, largestDenominator)\n{\n  var parsed = parseInput( input );\n\n  if ( parsed.unitClass )\n  {\n    // out of all groups in class, calculate converted value fraction and\n    // take the one that is a whole number or is the closest to a whole\n    // number while being the closest\n    var closest = null;\n    var closestGroup = null;\n    var groups = parsed.unitClass.groups;\n\n    for (var i = 0; i < groups.length; i++)\n    {\n      var grp = groups[ i ];\n      var fraction = parsed.convert( grp.unit, true );\n\n      if ( fraction.valid )\n      {\n        var better = !closest;\n\n        if ( closest )\n        {\n          var closeApprox = fraction.distance <= closest.distance;\n          var closeString = fraction.string.length <= closest.string.length;\n          var closeActual = (fraction.actual + '').length <= (closest.actual + '').length;\n\n          if ( closeApprox && (returnFraction ? closeString : closeActual) )\n          {\n            better = true;\n          }\n        }\n\n        if ( better )\n        {\n          closest = fraction;\n          closestGroup = grp;\n        }\n      }\n    }\n\n    if ( closest )\n    {\n      if ( parsed === input )\n      {\n        parsed = new UnitzParsed( closest.actual, closestGroup.unit, parsed.unitClass );\n      }\n      else\n      {\n        parsed.value = closest.actual;\n        parsed.unit = closestGroup.unit;\n        parsed.group = closestGroup;\n      }\n\n      parsed.normal = returnFraction ?\n        createNormal( closest.string, closestGroup.getUnit( closest.isSingular() ) ) :\n        closestGroup.addUnit( closest.actual );\n    }\n  }\n\n  return parsed;\n}\n\n/**\n * Converts the parsable input to the given unit. If the conversion can't be\n * done then false is returned.\n *\n * ```javascript\n * Unitz.convert('30 in', 'ft'); // 2.5\n * Unitz.convert('1 in', 'cm'); // 2.54\n * Unitz.convert('2 1/2 gal', 'qt'); // 10\n * ```\n *\n * @memberof Unitz\n * @param {parsable} input -\n *    The input to parse and convert to the given unit.\n * @param {String} unit -\n *    The unit to convert to.\n * @return {Number} -\n *    The converted number.\n */\nfunction convert(input, unit)\n{\n  var parsed = parseInput( input );\n\n  // Not valid input? return false\n  if ( !isObject( parsed ) )\n  {\n    return false;\n  }\n\n  var value = parsed.value;\n  var unitClass = parsed.unitClass;\n\n  // If there was no unit class and no unit provided, return the unitless value.\n  if ( !unitClass && !unit )\n  {\n    return value;\n  }\n\n  // If there was no unit class parsed OR the given unit is not in the same class then return false!\n  if ( !unitClass || !(unit in unitClass.converters) )\n  {\n    return false;\n  }\n\n  // If the parsed unit and requested unit is the same, return the parsed value.\n  if ( unitClass.groupMap[ unit ] === unitClass.groupMap[ parsed.unit ] )\n  {\n    return value;\n  }\n\n  // Convert the parsed value to its base unit\n  value *= unitClass.converters[ parsed.unit ];\n\n  // If they don't have the same bases convert the parsed value\n  var baseFrom = unitClass.bases[ parsed.unit ];\n  var baseTo = unitClass.bases[ unit ];\n\n  if ( baseFrom !== baseTo )\n  {\n    value *= unitClass.mapping[ baseFrom ][ baseTo ];\n  }\n\n  // Divide the value by the desired unit.\n  value /= unitClass.converters[ unit ];\n\n  return value;\n}\n\n/**\n * Given an array of unknown units - return the singular or plural unit. The\n * singular unit is the shorter string and the plural unit is the longer string.\n *\n * @memberof Unitz\n * @param {String[]} units -\n *    The array of units to look through.\n * @param {Boolean} singular -\n *    True if the singular unit should be returned, otherwise false if the\n *    plural unit should be returned.\n * @return {String} -\n *    The singular or plural unit determined.\n */\nfunction findUnit(units, singular)\n{\n  var chosen = '';\n\n  for (var i = 0; i < units.length; i++)\n  {\n    var u = units[ i ];\n\n    if ( u.length && (chosen === '' || (singular && u.length < chosen.length) || (!singular && u.length > chosen.length) ) )\n    {\n      chosen = u;\n    }\n  }\n\n  return chosen;\n}\n\n/**\n * Adds the two expressions together into a single string. Each expression can\n * be a comma delimited string of value & unit pairs - this function will take\n * the parsed values with the same classes and add them together. The string\n * returned has expressions passed through the {@link Unitz.best} function\n * optionally using fractions.\n *\n * ```javascript\n * Unitz.combine( 2, '3 tacos' ); // '5 tacos'\n * Unitz.combine( '2 cups', '1 pt' ); // '1 quart'\n * Unitz.combine( '3 cups, 1 bag', '2 bags, 12 tacos' ); // `3 cups, 3 bags, 12 tacos'\n * ```\n *\n * @memberof Unitz\n * @param {String|parsable|parsable[]} inputA -\n *    The first expression or set of expressions to add together.\n * @param {String|parsable|parsable[]} inputB -\n *    The second expression or set of expressions to add together.\n * @param {Boolean} [fraction=false] -\n *    If the returned value should attempt to use fractions.\n * @param {Number} [largestDenominator] -\n *    See {@link Unitz.Fraction}.\n * @return {String} -\n *    The string representation of `inputA + inputB`.\n */\nfunction combine(inputA, inputB, fraction, largestDenominator)\n{\n  var splitA = splitInput( inputA );\n  var splitB = splitInput( inputB );\n  var splitBoth = splitA.concat( splitB );\n  var parsed = [];\n\n  // Parse all inputs - ignore invalid inputs\n  for (var i = 0; i < splitBoth.length; i++)\n  {\n    var parsedInput = parseInput( splitBoth[ i ] );\n\n    if ( parsedInput !== false )\n    {\n      parsedInput.units = [];\n      parsedInput.units.push( parsedInput.unit );\n      parsed.push( parsedInput );\n    }\n  }\n\n  // Try merging subsequent (k) parsed values into this one (i)\n  for (var i = 0; i < parsed.length - 1; i++)\n  {\n    var a = parsed[ i ];\n\n    for (var k = parsed.length - 1; k > i; k--)\n    {\n      var b = parsed[ k ];\n      var converted = b.convert( a.unit );\n\n      // Same unit class. We can use proper singular/plural units.\n      if ( converted !== false && a.group )\n      {\n        parsed.splice( k, 1 );\n\n        a.value += converted;\n      }\n      // \"a\" or \"b\" doesn't have a unit\n      else if ( !a.unit || !b.unit )\n      {\n        parsed.splice( k, 1 );\n\n        a.value += b.value;\n        a.units = a.units.concat( b.units );\n      }\n      // \"a\" and \"b\" have a similar enough unit.\n      else if ( isHeuristicMatch( a.unit, b.unit ) )\n      {\n        parsed.splice( k, 1 );\n\n        a.value += b.value;\n        a.units = a.units.concat( b.units );\n      }\n    }\n  }\n\n  var combined = [];\n\n  for (var i = 0; i < parsed.length; i++)\n  {\n    var a = parsed[ i ];\n\n    if ( a.group )\n    {\n      a.normal = a.group.addUnit( a.value );\n    }\n    else\n    {\n      a.unit = findUnit( a.units, isSingular( a.value ) );\n      a.normal = createNormal( a.value, a.unit );\n    }\n\n    var parsedBest = best( a, fraction, largestDenominator );\n\n    if ( parsedBest && parsedBest.normal )\n    {\n      combined.push( parsedBest.normal );\n    }\n  }\n\n  return combined.join( Unitz.separatorJoin );\n}\n\n/**\n * Subtracts the second expression from the first expression and returns a\n * string representation of the results. Each expression can be a comma\n * delimited string of value & unit pairs - this function will take\n * the parsed values with the same classes and subtract them from each other.\n * The string returned has expressions passed through the {@link Unitz.best}\n * function optionally using fractions. By default negative quantities are not\n * included in the result but can overriden with `allowNegatives`.\n *\n * ```javascript\n * Unitz.subtract( '3 tacos', '1 taco' ); // '2 tacos'\n * Unitz.subtract( 4, 1 ); // '3'\n * Unitz.subtract( '3 cups, 1 bag', '2 bags, 12 tacos' ); // `3 cups'\n * ```\n *\n * @memberof Unitz\n * @param {String|parsable|parsable[]} inputA -\n *    The expression to subtract from.\n * @param {String|parsable|parsable[]} inputB -\n *    The expression to subtract from `inputA`.\n * @param {Boolean} [allowNegatives=false] -\n *    Whether or not negative values should be included in the results.\n * @param {Boolean} [fraction=false] -\n *    If the returned value should attempt to use fractions.\n * @param {Number} [largestDenominator] -\n *    See {@link Unitz.Fraction}.\n * @return {String} -\n *    The string representation of `inputA - inputB`.\n */\nfunction subtract(inputA, inputB, allowNegatives, fraction, largestDenominator)\n{\n  var splitA = splitInput( inputA );\n  var splitB = splitInput( inputB );\n  var splitBoth = splitA.concat( splitB );\n  var parsed = [];\n\n  // Parse all inputs - ignore invalid inputs\n  for (var i = 0; i < splitBoth.length; i++)\n  {\n    var parsedInput = parseInput( splitBoth[ i ] );\n\n    if ( parsedInput !== false )\n    {\n      parsedInput.sign = i >= splitA.length ? -1 : 1;\n      parsedInput.units = [];\n      parsedInput.units.push( parsedInput.unit );\n      parsed.push( parsedInput );\n    }\n  }\n\n  // Try merging subsequent (k) parsed values into this one (i)\n  for (var i = 0; i < parsed.length - 1; i++)\n  {\n    var a = parsed[ i ];\n\n    for (var k = parsed.length - 1; k > i; k--)\n    {\n      var b = parsed[ k ];\n      var converted = b.convert( a.unit );\n      var sign = b.sign * a.sign;\n\n      // Same unit class. We can use proper singular/plural units.\n      if ( converted !== false && a.group )\n      {\n        parsed.splice( k, 1 );\n\n        a.value += converted * sign;\n      }\n      // \"a\" or \"b\" doesn't have a unit\n      else if ( !a.unit || !b.unit )\n      {\n        parsed.splice( k, 1 );\n\n        a.value += b.value * sign;\n        a.units = a.units.concat( b.units );\n      }\n      // \"a\" and \"b\" have a similar enough unit.\n      else if ( isHeuristicMatch( a.unit, b.unit ) )\n      {\n        parsed.splice( k, 1 );\n\n        a.value += b.value * sign;\n        a.units = a.units.concat( b.units );\n      }\n    }\n  }\n\n  var combined = [];\n\n  for (var i = 0; i < parsed.length; i++)\n  {\n    var a = parsed[ i ];\n\n    if ( (a.value < 0 || a.sign < 0) && !allowNegatives )\n    {\n      continue;\n    }\n\n    if ( a.group )\n    {\n      a.normal = a.group.addUnit( a.value );\n    }\n    else\n    {\n      a.unit = findUnit( a.units, isSingular( a.value ) );\n      a.normal = createNormal( a.value, a.unit );\n    }\n\n    var parsedBest = best( a, fraction, largestDenominator );\n\n    if ( parsedBest && parsedBest.normal )\n    {\n      combined.push( parsedBest.normal );\n    }\n  }\n\n  return combined.join( Unitz.separatorJoin );\n}\n\n/**\n * Parses the given input and returns a {@link Unitz.Parsed} instance with a new\n * `conversions` property which is an array of {@link Unitz.Conversion}s.\n * The array of conversions generated can be limited by minimum and maximum\n * numbers to only return human friendly conversions.\n *\n * ```javascript\n * Unitz.conversions('2.25 hrs', 0.1, 1000); // '135 minutes', '2 1/4 hours'\n * ```\n *\n * @memberof Unitz\n * @param {parsable} input -\n *    The input to generate conversions for.\n * @param {Number} [min] -\n *    If given, the conversions returned will all have values above `min`.\n * @param {Number} [max] -\n *    If given, the conversions returned will all have values below `max`.\n * @param {Number} [largestDenominator] -\n *    See {@link Unitz.Fraction}.\n * @return {Unitz.Parsed} -\n *    The instance parsed from the input with a `conversions` array. If the\n *    parsed input is not valid or has a unit class then the input given is\n *    returned.\n */\nfunction conversions(input, min, max, largestDenominator)\n{\n  var parsed = parseInput( input );\n\n  if ( !isObject( parsed ) || !parsed.unitClass )\n  {\n    return input;\n  }\n\n  var groups = parsed.unitClass.groups;\n  var conversions = parsed.conversions = [];\n\n  for (var i = 0; i < groups.length; i++)\n  {\n    var grp = groups[ i ];\n    var converted = parsed.convert( grp.unit );\n\n    if ( !isNumber( converted ) )\n    {\n      continue;\n    }\n\n    if ( isNumber( min ) && converted < min )\n    {\n      continue;\n    }\n\n    if ( isNumber( max ) && converted > max )\n    {\n      continue;\n    }\n\n    var fraction = new UnitzFraction( converted, grp.denominators, largestDenominator );\n\n    conversions.push(new UnitzConversion( converted, fraction, grp ));\n  }\n\n  return parsed;\n}\n\n/**\n * Adds a new {@link Unitz.Class} to Unitz registering all converters in the\n * class to be available for parsing.\n *\n * @memberof Unitz\n * @param {Unitz.Class} unitClass -\n *    The unit class to add.\n */\nfunction addClass(unitClass)\n{\n  classMap[ unitClass.className ] = unitClass;\n  classes.push( unitClass );\n\n  for (var unit in unitClass.converters)\n  {\n    unitToClass[ unit ] = unitClass;\n  }\n}\n\n\n/**\n * Instantiates a new class instance with a name. A class stores information on\n * how to convert values between units, the set of valid strings to denote a\n * unit group, the singular and plural versions of a unit, and the valid\n * fraction denominators for that unit.\n *\n * @memberof Unitz\n * @alias Class\n * @class\n * @constructor\n * @param {String} className -\n *    The name of the class.\n */\nfunction UnitzClass(className)\n{\n  /**\n   * The name of the class.\n   *\n   * @member {String}\n   */\n  this.className = className;\n\n  /**\n   * The map of numbers it takes to get from one unit to another.\n   *\n   * @member {Object}\n   */\n  this.converters = {};\n\n  /**\n   * The map of numbers it takes to get from one base unit to another base unit.\n   * There can be multiple systems in a single class (like Imperial vs Metric)\n   * and when conversion takes place in {@link Unitz.convert} from one system\n   * to another this map is used.\n   *\n   * @member {Object}\n   */\n  this.mapping = {};\n\n  /**\n   * A map of unit aliases to their base unit.\n   *\n   * @member {Object}\n   */\n  this.bases = {};\n\n  /**\n   * The array of groups in this class.\n   *\n   * @member {Unitz.Group[]}\n   */\n  this.groups = [];\n\n  /**\n   * The map of unit aliases to their group.\n   *\n   * @member {Object}\n   */\n  this.groupMap = {};\n}\n\nUnitzClass.prototype =\n{\n\n  /**\n   * Adds a unit group to this class. A unit group is a unit relative to another\n   * unit and has it's own aliases for the unit, singluar & plural\n   * representations, and denominators to make unit-friendly fractions. The\n   * group added to this class is returned.\n   *\n   * @method\n   * @memberof Unitz.Class#\n   * @param {Number} relativeValue -\n   *    The value to scale by to get from the `relativeTo` unit to this unit\n   *    group. If this is a base unit then this value should be 1 and the\n   *    `relativeTo` should be not given.\n   * @param {String} relativeTo -\n   *    The unit the unit group being added is relative to. This should not be\n   *    given when defining a base unit.\n   * @param {String[]} units -\n   *    The aliases for the unit group being added, each are valid ways to\n   *    represent this group. These MUST be in lowercase form.\n   * @param {Number[]} denominators -\n   *    The denominators that are valid for the group being added. This is used\n   *    so you don't see odd fractions that don't make sense for the given unit.\n   * @param {String} singular -\n   *    The singular unit (when a |value| is 1) to use for the added group.\n   * @param {String} plural -\n   *    The plural unit (when a |value| is not 1) to use for the added group.\n   * @return {Unitz.Group} -\n   *    The unit group added to this class.\n   */\n  addGroup: function(relativeValue, relativeTo, units, denominators, singular, plural)\n  {\n    var mainUnit = units[ 0 ];\n    var baseUnit = mainUnit;\n\n    if ( relativeTo )\n    {\n      relativeValue *= this.converters[ relativeTo ];\n\n      baseUnit = this.bases[ relativeTo ];\n    }\n\n    var group = new UnitzGroup( mainUnit, baseUnit, relativeValue, units, singular, plural, denominators );\n\n    for (var i = 0; i < units.length; i++)\n    {\n      var unit = units[ i ];\n\n      this.converters[ unit ] = relativeValue;\n      this.bases[ unit ] = baseUnit;\n      this.groupMap[ unit ] = group;\n    }\n\n    this.groups.push( group );\n\n    return group;\n  },\n\n  /**\n   * Removes a unit from this class. The group the unit to still exists in this\n   * class, but the unit won't be parsed to the group anymore.\n   *\n   * @method\n   * @memberof Unitz.Class#\n   * @param {String} unit -\n   *    The lowercase unit to remove from this class.\n   * @return {Boolean} -\n   *    True if the unit was removed, false if it does not exist in this class.\n   */\n  removeUnit: function(unit)\n  {\n    var exists = unit in this.converters;\n\n    delete this.converters[ unit ];\n    delete this.bases[ unit ];\n    delete this.groupMap[ unit ];\n    delete unitToClass[ unit ];\n\n    return exists;\n  },\n\n  /**\n   * Removes the group which has the given unit. The group will be removed\n   * entirely from the system and can no longer be parsed or converted to and\n   * from.\n   *\n   * @method\n   * @memberof Unitz.Class#\n   * @param {String} unit -\n   *    The lowercase unit of the group to remove.\n   * @return {Boolean} -\n   *    True if the group was removed, false if it does not exist in this class.\n   */\n  removeGroup: function(unit)\n  {\n    var group = this.groupMap[ unit ];\n    var removed = false;\n\n    if ( group )\n    {\n      var units = group.units;\n\n      for (var i = 0; i < units.length; i++)\n      {\n        var unit = units[ i ];\n\n        if ( this.groupMap[ unit ] === group )\n        {\n          delete this.converters[ unit ];\n          delete this.bases[ unit ];\n          delete this.groupMap[ unit ];\n          delete unitToClass[ unit ];\n        }\n      }\n\n      var index = this.groups.indexOf( group );\n\n      if ( index !== -1 )\n      {\n        this.groups.splice( index, 1 );\n\n        removed = true;\n      }\n    }\n\n    return removed;\n  },\n\n  /**\n   * Adds a one direction conversion from one base unit to another.\n   *\n   * @method\n   * @memberof Unitz.Class#\n   * @param {String} source -\n   *    The source unit.\n   * @param {String} target -\n   *    The target unit.\n   * @param {Number} value -\n   *    The value the source number needs to be multiplied by to get to the\n   *    target value.\n   * @see Unitz.Class#addBaseConversion\n   */\n  addOneBaseConversion: function(source, target, value)\n  {\n    if ( !(source in this.mapping) )\n    {\n      this.mapping[ source ] = {};\n    }\n\n    this.mapping[ source ][ target ] = value;\n  },\n\n  /**\n   * Adds a bi-directional conversion from one base unit to another.\n   *\n   * ```javascript\n   * uc.addBaseConversion( 'in', 'cm', 2.54 ); // 1 in to 2.54 cm\n   * ```\n   *\n   * @method\n   * @memberof Unitz.Class#\n   * @param {String} source -\n   *    The source unit.\n   * @param {String} target -\n   *    The target unit.\n   * @param {Number} value -\n   *    The value the source number needs to be multiplied by to get to the\n   *    target value.\n   * @see Unitz.Class#addBaseConversion\n   */\n  addBaseConversion: function(source, target, value)\n  {\n    this.addOneBaseConversion( source, target, value );\n    this.addOneBaseConversion( target, source, 1.0 / value );\n  }\n\n};\n\n\n/**\n * Instantiates a new unit group. A unit group is a single unit and all of it's\n * aliases, singular & plural versions, and all valid denominators when\n * converting to a fraction.\n *\n * @memberof Unitz\n * @alias Group\n * @class\n * @constructor\n * @param {String} mainUnit -\n *    The main unit for the group. This is typically the most common short\n *    version for the unit.\n * @param {String} baseUnit -\n *    The unit this group is calculated relative to.\n * @param {Number} baseScale -\n *    The value used to calculate between this group and the base group.\n * @param {String[]} units -\n *    The aliases for this unit, each are valid ways to represent this group.\n *    These MUST be in lowercase form.\n * @param {String} singular -\n *    The singular unit (when a |value| is 1) to use.\n * @param {String} plural -\n *    The plural unit (when a |value| is not 1) to use.\n * @param {Number[]} denominators -\n *    The denominators that are valid for this group. This is used so you don't\n *    see odd fractions that don't make sense for the given unit.\n * @see Unitz.Class#addGroup\n */\nfunction UnitzGroup(mainUnit, baseUnit, baseScale, units, singular, plural, denominators)\n{\n  /**\n   * The main unit for the group. This is typically the most common short\n   * version for the unit.\n   *\n   * @member {String}\n   */\n  this.unit = mainUnit;\n\n  /**\n   * The unit this group is calculated relative to.\n   *\n   * @member {String}\n   */\n  this.baseUnit = baseUnit;\n\n  /**\n   * The value used to calculate between this group and the base group.\n   *\n   * @member {Number}\n   */\n  this.baseScale = baseScale;\n\n  /**\n   * The aliases for this unit, each are valid ways to represent this group.\n   * These MUST be in lowercase form.\n   *\n   * @member {String[]}\n   */\n  this.units = units;\n\n  /**\n   * The singular unit (when a |value| is 1) to use.\n   *\n   * @member {String}\n   */\n  this.singular = singular;\n\n  /**\n   * The plural unit (when a |value| is not 1) to use.\n   *\n   * @member {String}\n   */\n  this.plural = plural;\n\n  /**\n   * The denominators that are valid for this group. This is used so you don't\n   * see odd fractions that don't make sense for the given unit.\n   *\n   * @member {Number[]}\n   */\n  this.denominators = denominators;\n\n}\n\nUnitzGroup.prototype =\n{\n\n  /**\n   * Adds the appropriate unit to the given number based on whether its a\n   * singular or plural value.\n   *\n   * ```javascript\n   * group.addUnit( 1 ); // '1 unit'\n   * group.addUnit( 2 ); // '2 units'\n   * group.addUnit( 0.5 ); // '0.5 units'\n   * ```\n   *\n   * @method\n   * @memberof Unitz.Group#\n   * @param {Number} x -\n   *    The number to add the appropriate unit to.\n   * @see Unitz.isSingular\n   * @see Unitz.createNormal\n   * @return {String}\n   */\n  addUnit: function(x)\n  {\n    return createNormal( x, this.getUnit( x ) );\n  },\n\n  /**\n   * Gets the appropriate unit for the given number based on whether its a\n   * singular or plural value.\n   *\n   * ```javascript\n   * group.getUnit( 1 ); // 'unit'\n   * group.getUnit( 2 ); // 'units'\n   * group.getUnit( 0.5 ); // 'units'\n   * ```\n   *\n   * @method\n   * @memberof Unitz.Group#\n   * @param {Number} x -\n   *    The number to determine the appropriate unit for.\n   * @see Unitz.isSingular\n   * @return {String}\n   */\n  getUnit: function(x)\n  {\n    return isSingular( x ) ? this.singular : this.plural;\n  }\n\n};\n\n\n/**\n * Instantiates a new parsed instance with a number, unit, string representation,\n * and optionally the unit class if the unit was recognized by Unitz.\n *\n * @memberof Unitz\n * @alias Parsed\n * @class\n * @constructor\n * @param {Number} value -\n *    The parsed number.\n * @param {String} unit -\n *    The unit for the number (empty string if no unit specified).\n * @param {Unitz.Class} [unitClass] -\n *    The class for the unit (if any).\n * @param {String} normal -\n *    The normalized representation of the number and unit combined. If a unit\n *    class is given this will be re-calculated using the proper singular/plural\n *    unit for it's group.\n */\nfunction UnitzParsed(value, unit, unitClass, normal)\n{\n  /**\n   * The current parsed value.\n   *\n   * @member {Number}\n   */\n  this.value = value;\n\n  /**\n   * The unit for the current value (if any).\n   *\n   * @member {String}\n   */\n  this.unit = unit;\n\n  /**\n   * The class of the unit (if any).\n   *\n   * @member {Unitz.Class}\n   */\n  this.unitClass = unitClass;\n\n  /**\n   * The group of the unit (if any).\n   *\n   * @member {Unitz.Group}\n   */\n  this.group = unitClass ? unitClass.groupMap[ unit ] : null;\n\n  /**\n   * The string representation of the parsed value. If this instance has a group\n   * this will be the current value with the appropriate singular/plural unit -\n   * otherwise this will be the input passed to the {@link Unitz.parse} function.\n   *\n   * @member {String}\n   */\n  this.normal = this.group ? this.group.addUnit( value ) : normal;\n}\n\nUnitzParsed.prototype =\n{\n\n  /**\n   * Converts the current value to another unit. The default behavior is to\n   * return a number in the desired unit - however you can specify a truthy value\n   * for `returnFraction` and a {@Unitz.Fraction} will be returned. If the unit\n   * to convert to is not a valid unit for this Parsed value - false will be\n   * returned.\n   *\n   * ```javascript\n   * var p = Unitz.parse('2 cups');\n   * p.convert('qt');                 // 0.5\n   * p.convert('qt', true);           // '1/2'\n   * p.convert('qt', false, true);    // '0.5 qt'\n   * p.convert('qt', true, true);     // '1/2 qt'\n   *\n   * var q = Unitz.parse('0.125 trees'); // unknown unit\n   * q.convert('trees', true, true, 10, [2, 4, 8, 16]); // '1/8 trees'\n   * ```\n   *\n   * @method\n   * @memberof Unitz.Parsed#\n   * @param {String} to -\n   *    The unit to convert the current value to.\n   * @param {Boolean} [returnFraction=false] -\n   *    Whether the resulting conversion should return a {@link Unitz.Fraction}.\n   * @param {Boolean} [withUnit=false] -\n   *    Whether the value returned has the given unit appended to the end of it.\n   *    If the returned value is a fraction the given unit will be appended to\n   *    the {@link Unitz.Parsed#string} property.\n   * @param {Number} [largestDenominator] -\n   *    See {@link Unitz.Fraction}.\n   * @param {Number[]} [classlessDenominators] -\n   *    If the current value does not have a {@link Unitz.Group} (which stores\n   *    the valid fraction denominators for the unit) you can specify which\n   *    denominators to use when calculating the nearest fraction to the\n   *    converted value.\n   * @param {Boolean} [roundDown=false] -\n   *    A fraction will try to find the closest value to `value` - sometimes the\n   *    closest fraction is larger than the given `value` and it is used. You can\n   *    pass true to this constructor and it will make sure the fraction determined\n   *    is never over the given `value`.\n   * @see Unitz.Fraction\n   * @return {Number|String|Unitz.Fraction|false}\n   */\n  convert: function(to, returnFraction, withUnit, largestDenominator, classlessDenominators, roundDown)\n  {\n    var converted = convert( this, to );\n\n    if ( converted !== false && returnFraction )\n    {\n      var denominators = this.group ? this.group.denominators : classlessDenominators;\n\n      if ( isArray( denominators ) )\n      {\n        converted = new UnitzFraction( converted, denominators, largestDenominator, roundDown );\n\n        if ( isObject( converted ) && withUnit && to )\n        {\n          converted.string = createNormal( converted.string, to );\n        }\n      }\n    }\n\n    if ( withUnit && isNumber( converted ) && to )\n    {\n      converted = createNormal( converted, to );\n    }\n\n    return converted;\n  },\n\n  /**\n   * Determines the best way to represent the current value. {@link Unitz.best}\n   *\n   * @param {Boolean} [returnFraction=false] -\n   *    Whether the {@link Unitz.Parsed#normal} returned should be converted to\n   *    a fraction (if a nice fraction exists).\n   * @param {Number} [largestDenominator] -\n   *    See {@link Unitz.Fraction}.\n   * @see Unitz.best\n   * @return {Unitz.Parsed}\n   */\n  best: function(returnFraction, largestDenominator)\n  {\n    return best( this, returnFraction, largestDenominator );\n  },\n\n  /**\n   * Returns the fraction representation of this parsed value.\n   *\n   * @param {Boolean} [withUnit=false] -\n   *    If the {@link Unitz.Fraction#string} property should have the unit added\n   *    to it.\n   * @param {Number[]} [denominators] -\n   *    The array of denominators to use when converting the given value into a\n   *    fraction. If a falsy value is given the denonimators of this parsed group\n   *    will be used if a unit group has been determined.\n   * @param {Number} [largestDenominator] -\n   *    Sometimes you don't want to use all of the denominators in the above array\n   *    (it could be from a {@link Unitz.Group}) and you would like to set a max.\n   *    If the denominators given has something like `[2, 4, 8, 100]` and you\n   *    don't want a fraction like `3/100` you can set the `largestDenominator` to\n   *    a number lower than 100 and you won't ever get that denominator.\n   * @param {Boolean} [roundDown=false] -\n   *    A fraction will try to find the closest value to `value` - sometimes the\n   *    closest fraction is larger than the given `value` and it is used. You can\n   *    pass true to this constructor and it will make sure the fraction determined\n   *    is never over the given `value`.\n   * @return {Unitz.Fraction} -\n   *    A new instance of Unitz.Fraction which is a representation of the parsed\n   *    value.\n   */\n  fraction: function(withUnit, denominators, largestDenominator, roundDown)\n  {\n    var groupDenominators = this.group ? this.group.denominators : [];\n    var fractionDenominators = denominators || groupDenominators;\n    var fraction = new UnitzFraction( this.value, fractionDenominators, largestDenominator, roundDown );\n\n    if (withUnit)\n    {\n      fraction.string = createNormal( fraction.string, this.unit );\n    }\n\n    return fraction;\n  }\n\n};\n\n/**\n * Returns a unitless {@link Unitz.Parsed} instance for the given number.\n *\n * @method fromNumber\n * @memberof Unitz.Parsed\n * @param {Number} number -\n *    The value of the parsed instance returned.\n * @return {Unitz.Parsed}\n */\nUnitzParsed.fromNumber = function(number)\n{\n  return new UnitzParsed(number, '', null, number, null);\n};\n\n\n/**\n * Instantiates and builds a fraction from a number given the denominators to\n * use and the largest denominator to look at for this instance.\n *\n * The fraction is calculated by using each of the denominators given and\n * calculating the nearest fraction - the denoninator that results in the\n * fraction closest to the given value is used. If no denominators are given or\n * the value is closer to a whole number than to any other fraction then the\n * fraction will have a denominator of one. If no fractions can be calculated\n * that leaves the resulting value within {@Unitz.epsilon} then this fraction\n * will be marked as \"invalid\".\n *\n * ```javascript\n * new Unitz.Fraction( 0.5, [2, 3, 4] ).string; // '1/2'\n * new Unitz.Fraction( 1.5, [2, 3, 4] ).string; // '1 1/2'\n * new Unitz.Fraction( 0.25, [2, 3, 4] ).string; // '1/4'\n * new Unitz.Fraction( 0.125, [2, 3, 4] ).string; // 0.125\n * new Unitz.Fraction( 0.125, [2, 3, 4, 8] ).string; // '1/8'\n * ```\n *\n * @memberof Unitz\n * @alias Fraction\n * @class\n * @constructor\n * @param {Number} value -\n *    A number to build a fraction for.\n * @param {Number[]} denominators -\n *    The array of denominators to use when converting the given value into a\n *    fraction.\n * @param {Number} [largestDenominator] -\n *    Sometimes you don't want to use all of the denominators in the above array\n *    (it could be from a {@link Unitz.Group}) and you would like to set a max.\n *    If the denominators given has something like `[2, 4, 8, 100]` and you\n *    don't want a fraction like `3/100` you can set the `largestDenominator` to\n *    a number lower than 100 and you won't ever get that denominator.\n * @param {Boolean} [roundDown=false] -\n *    A fraction will try to find the closest value to `value` - sometimes the\n *    closest fraction is larger than the given `value` and it is used. You can\n *    pass true to this constructor and it will make sure the fraction determined\n *    is never over the given `value`.\n */\nfunction UnitzFraction(value, denominators, largestDenominator, roundDown)\n{\n  var distance = Math.abs( Math.floor( value ) - value );\n  var denominator = 1;\n  var numerator = value;\n\n  for (var i = 0; i < denominators.length && distance > Unitz.epsilon; i++)\n  {\n    var den = denominators[ i ];\n    var num = Math.round( value * den );\n    var signdis = num / den - value;\n    var dis = Math.abs( signdis );\n\n    if ( isNumber( largestDenominator ) && den > largestDenominator )\n    {\n      break;\n    }\n\n    if ( roundDown && signdis > 0 )\n    {\n      continue;\n    }\n\n    if ( dis + Unitz.epsilon < distance )\n    {\n      denominator = den;\n      numerator = num;\n      distance = dis;\n    }\n  }\n\n  /**\n   * The `value` passed to the fraction constructor.\n   *\n   * @member {Number}\n   */\n  this.value = value;\n\n  /**\n   * The calculated numerator of the fraction. If the fraction is negative this\n   * number will be negative. If this fraction is not valid - this will be the\n   * `value` passed into the constructor.\n   *\n   * @member {Number}\n   */\n  this.numerator = numerator;\n\n  /**\n   * The calculated denominator of the fraction. If this fraction is not valid\n   * this will be a 1 (valid fractions can also have a denoninator of 1 if the\n   * given `value` is a whole number).\n   *\n   * @member {Number}\n   */\n  this.denominator = denominator;\n\n  /**\n   * The actual value of the fraction (numerator / denominator).\n   *\n   * @member {Number}\n   */\n  this.actual = numerator / denominator;\n\n  /**\n   * The distance the calculated fraction value (`actual`) is from the `value`\n   * given in the constructor.\n   *\n   * @member {Number}\n   */\n  this.distance = distance;\n\n  /**\n   * The whole number calculated for the fraction. This will be zero for values\n   * less than 1 and greater than -1.\n   *\n   * @member {Number}\n   */\n  this.whole = this.actual < 0 ? Math.ceil( this.actual ) : Math.floor( this.actual );\n\n  /**\n   * The remainder is the part that goes over the denominator when the fraction\n   * has a whole number (when `|value|` is over 1).\n   *\n   * @member\n   */\n  this.remainder = Math.abs( Math.round( (value - this.whole) * denominator ) );\n\n  /**\n   * Whether or not the fraction is valid. A Fraction is valid when a fraction\n   * could be calculated that is within {@link Unitz.epsilon} of the `value`\n   * given to the constructor.\n   *\n   * @member\n   */\n  this.valid = denominator !== 1 || isWhole( numerator );\n\n  /**\n   * The string representation of this fraction. If the denominator is \"1\" or\n   * the fraction is invalid then the `numerator` is returned. If the fraction\n   * has a whole number component then `whole remainder/denominator` is returned\n   * otherwise `numerator/denominator` is returned.\n   *\n   * @member\n   */\n  this.string = '';\n\n  if ( denominator === 1 )\n  {\n    this.string = numerator + '';\n  }\n  else if ( this.whole === 0 )\n  {\n    this.string = numerator + '/' + denominator;\n  }\n  else if ( this.remainder !== 0 )\n  {\n    this.string = this.whole + ' ' + this.remainder + '/' + denominator;\n  }\n  else\n  {\n    this.string = this.whole + '';\n  }\n}\n\nUnitzFraction.prototype =\n{\n\n  /**\n   * Determines whether this fraction represents a singular value. Fractions are\n   * handled differently than numbers - a number must be equal to 1 or -1 but\n   * a fraction can be singular if between 1 and -1. This ensures that\n   * expressions like describing \"0.5 miles\" in fraction form \"1/2 mile\" makes\n   * sense.\n   *\n   * @memberof Unitz.Fraction#\n   * @return {Number} -\n   *    Returns 1 if this fraction describes a singular amount, otherwise 0.\n   */\n  isSingular: function()\n  {\n    return Math.ceil( Math.abs( this.actual ) ) === 1 ? 1 : 0;\n  }\n\n};\n\n\n/**\n * Instantiates a new conversion instance with a converted value, it's fraction\n * representation, and the unit group.\n *\n * @memberof Unitz\n * @alias Conversion\n * @class\n * @constructor\n * @param {Number} converted -\n *    The converted value as a number.\n * @param {Unitz.Fraction} fraction -\n *    The converted value as a fraction.\n * @param {Unitz.Group} group -\n *    The group for the unit of this conversion.\n * @see Unitz.conversions\n */\nfunction UnitzConversion(converted, fraction, group)\n{\n  /**\n   * The converted value.\n   *\n   * @member {Number}\n   */\n  this.decimal = converted;\n\n  /**\n   * The converted fraction.\n   *\n   * @member {Unitz.Fraction}\n   */\n  this.fraction = fraction;\n\n  /**\n   * The group of the converted value.\n   *\n   * @member {Unitz.Group}\n   */\n  this.group = group;\n\n  /**\n   * The short representation for the conversion unit. This doesn't change\n   * depending on the singular/plural nature of the converted value.\n   *\n   * @member {String}\n   */\n  this.shortUnit = group.unit;\n\n  /**\n   * The long representation for the conversion unit. This depends on the\n   * singular/plural nature of the converted value.\n   *\n   * @member {String}\n   */\n  this.longUnit = fraction.valid ? group.getUnit( fraction.isSingular() ) : group.getUnit( converted );\n\n  /**\n   * The friendly version of the converted value - either the\n   * {@link Unitz.Fraction#string} value of the fraction is valid - or the\n   * {@link Unitz.Conversion#decimal} value.\n   *\n   * @member {String|Number}\n   */\n  this.friendly = fraction.valid ? fraction.string : converted;\n\n  /**\n   * The friendly version of the converted value with the short unit appended.\n   *\n   * @member {String}\n   */\n  this.shortNormal = createNormal( this.friendly, this.shortUnit );\n\n  /**\n   * The friendly version of the converted value with the long unit appended.\n   *\n   * @member {String}\n   */\n  this.longNormal = createNormal( this.friendly, this.longUnit );\n\n}\n\n\naddClass((function generateVolumeClass()\n{\n  var uc = new UnitzClass( 'Area' );\n\n  uc.addGroup( 1,     null,    ['sqin', 'sq. in.', 'sq in', 'in2', 'in^2', 'square inch', 'square inches'], [2, 4, 8, 16], 'square inch', 'square inches' );\n  uc.addGroup( 144,   'sqin',  ['sqft', 'sq. ft.', 'sq ft', 'ft2', 'ft^2', 'square foot', 'square feet'], [2, 4, 8, 16], 'square foot', 'square feet' );\n  uc.addGroup( 9,     'sqft',  ['sqyd', 'sq. yd.', 'sq yd', 'yd2', 'yd^2', 'square yard', 'square yards'], [2, 3, 4, 8, 9, 16], 'square yard', 'square yards' );\n  uc.addGroup( 4840,  'sqyd',  ['acre', 'acres'], [2, 3, 4, 8, 10], 'acre', 'acres' );\n  uc.addGroup( 640,   'acre',  ['sqmi', 'sq. mi.', 'sq mi', 'mi2', 'mi^2', 'square mile', 'square miles'], [2, 3, 4, 8, 10], 'square mile', 'square miles' );\n\n  uc.addGroup( 1,     null,    ['sqmm', 'sq. mm.', 'sq mm', 'mm2', 'mm^2', 'square millimeter', 'square millimeters'], [2, 4, 8, 16], 'square millimeter', 'square millimeters' );\n  uc.addGroup( 100,   'sqmm',  ['sqcm', 'sq. cm.', 'sq cm', 'cm2', 'cm^2', 'square centimeter', 'square centimeters'], [2, 4, 8, 16], 'square centimeter', 'square centimeters' );\n  uc.addGroup( 10000, 'sqcm',  ['sqm', 'sq. m.', 'sq m', 'm2', 'm^2', 'square meter', 'square meters'], [2, 4, 8, 16], 'square meter', 'square meters' );\n  uc.addGroup( 1000000, 'sqm', ['sqkm', 'sq. km.', 'sq km', 'km2', 'km^2', 'square kilometer', 'square kilometers'], [2, 3, 4, 8, 9, 16], 'square kilometer', 'square kilometers' );\n\n  uc.addBaseConversion( 'sqin', 'sqmm', 645.16 );\n\n  return uc;\n\n})());\n\n\naddClass((function generateVolumeClass()\n{\n  var uc = new UnitzClass( 'Digital' );\n\n  uc.addGroup( 1,     null,   ['bit', 'bits'], [], 'bit', 'bits' );\n  uc.addGroup( 4,     'bit',   ['nibble', 'nibbles', 'nybble', 'nyble', 'half-byte', 'half byte', 'tetrade', 'semi-octet', 'quadbit', 'quartet'], [], 'nibble', 'nibbles' );\n  uc.addGroup( 8,     'bit',   ['b', 'byte', 'bytes'], [2, 8], 'byte', 'bytes' );\n\n  uc.addGroup( 1000,  'b',     ['kb', 'kilobyte', 'kilobytes'], [2, 4, 5, 10], 'kilobyte', 'kilobytes' );\n  uc.addGroup( 1000,  'kb',    ['mb', 'megabyte', 'megabytes'], [2, 4, 5, 10], 'megabyte', 'megabytes' );\n  uc.addGroup( 1000,  'mb',    ['gb', 'gigabyte', 'gigabytes'], [2, 4, 5, 10], 'gigabyte', 'gigabytes' );\n  uc.addGroup( 1000,  'gb',    ['tb', 'terabyte', 'terabytes'], [2, 4, 5, 10], 'terabyte', 'terabytes' );\n  uc.addGroup( 1000,  'tb',    ['pb', 'petabyte', 'petabytes'], [2, 4, 5, 10], 'petabyte', 'petabytes' );\n  uc.addGroup( 1000,  'pb',    ['eb', 'exabyte', 'exabytes'], [2, 4, 5, 10], 'exabyte', 'exabytes' );\n  uc.addGroup( 1000,  'eb',    ['zb', 'zettabyte', 'zettabytes'], [2, 4, 5, 10], 'zettabyte', 'zettabytes' );\n  uc.addGroup( 1000,  'zb',    ['yb', 'yottabyte', 'yottabytes'], [2, 4, 5, 10], 'yottabyte', 'yottabytes' );\n\n  uc.addGroup( 1024,  'b',     ['kib', 'kibibyte', 'kibibytes'], [2, 4, 8, 16], 'kibibyte', 'kibibytes' );\n  uc.addGroup( 1024,  'kib',   ['mib', 'mebibyte', 'mebibytes'], [2, 4, 8, 16], 'mebibyte', 'mebibytes' );\n  uc.addGroup( 1024,  'mib',   ['gib', 'gibibyte', 'gibibytes'], [2, 4, 8, 16], 'gibibyte', 'gibibytes' );\n  uc.addGroup( 1024,  'gib',   ['tib', 'tebibyte', 'tebibytes'], [2, 4, 8, 16], 'tebibyte', 'tebibytes' );\n  uc.addGroup( 1024,  'tib',   ['pib', 'pebibyte', 'pebibytes'], [2, 4, 8, 16], 'pebibyte', 'pebibytes' );\n  uc.addGroup( 1024,  'pib',   ['eib', 'exbibyte', 'exbibytes'], [2, 4, 8, 16], 'exbibyte', 'exbibytes' );\n  uc.addGroup( 1024,  'eib',   ['zib', 'zebibyte', 'zebibytes'], [2, 4, 8, 16], 'zebibyte', 'zebibytes' );\n  uc.addGroup( 1024,  'zib',   ['yib', 'yobibyte', 'yobibytes'], [2, 4, 8, 16], 'yobibyte', 'yobibytes' );\n\n  uc.addGroup( 1000,  'bit',   ['kbit', 'kilobit', 'kilobits'], [2, 4, 5, 10], 'kilobit', 'kilobits' );\n  uc.addGroup( 1000,  'kbit',  ['mbit', 'megabit', 'megabits'], [2, 4, 5, 10], 'megabit', 'megabits' );\n  uc.addGroup( 1000,  'mbit',  ['gbit', 'gigabit', 'gigabits'], [2, 4, 5, 10], 'gigabit', 'gigabits' );\n  uc.addGroup( 1000,  'gbit',  ['tbit', 'terabit', 'terabits'], [2, 4, 5, 10], 'terabit', 'terabits' );\n  uc.addGroup( 1000,  'tbit',  ['pbit', 'petabit', 'petabits'], [2, 4, 5, 10], 'petabit', 'petabits' );\n  uc.addGroup( 1000,  'pbit',  ['ebit', 'exabit', 'exabits'], [2, 4, 5, 10], 'exabit', 'exabits' );\n  uc.addGroup( 1000,  'ebit',  ['zbit', 'zettabit', 'zettabits'], [2, 4, 5, 10], 'zettabit', 'zettabits' );\n  uc.addGroup( 1000,  'zbit',  ['ybit', 'yottabit', 'yottabits'], [2, 4, 5, 10], 'yottabit', 'yottabits' );\n\n  uc.addGroup( 1024,  'bit',   ['kibit', 'kibibit', 'kibibits'], [2, 4, 8, 16], 'kibibit', 'kibibits' );\n  uc.addGroup( 1024,  'kibit', ['mibit', 'mebibit', 'mebibits'], [2, 4, 8, 16], 'mebibit', 'mebibits' );\n  uc.addGroup( 1024,  'mibit', ['gibit', 'gibibit', 'gibibits'], [2, 4, 8, 16], 'gibibit', 'gibibits' );\n  uc.addGroup( 1024,  'gibit', ['tibit', 'tebibit', 'tebibits'], [2, 4, 8, 16], 'tebibit', 'tebibits' );\n  uc.addGroup( 1024,  'tibit', ['pibit', 'pebibit', 'pebibits'], [2, 4, 8, 16], 'pebibit', 'pebibits' );\n  uc.addGroup( 1024,  'pibit', ['eibit', 'exbibit', 'exbibits'], [2, 4, 8, 16], 'exbibit', 'exbibits' );\n  uc.addGroup( 1024,  'eibit', ['zibit', 'zebibit', 'zebibits'], [2, 4, 8, 16], 'zebibit', 'zebibits' );\n  uc.addGroup( 1024,  'zibit', ['yibit', 'yobibit', 'yobibits'], [2, 4, 8, 16], 'yobibit', 'yobibits' );\n\n  return uc;\n\n})());\n\n\naddClass((function generateLengthClass()\n{\n  var uc = new UnitzClass( 'Length' );\n\n  uc.addGroup( 1,     null,   ['in', 'inch', 'inches', '\"'], [2, 3, 4, 8, 16, 32], 'inch', 'inches' );\n  uc.addGroup( 12,    'in',   ['ft', 'foot', 'feet', \"'\"], [2, 3, 4, 12], 'foot', 'feet' );\n  uc.addGroup( 3,     'ft',   ['yd', 'yds', 'yard', 'yards'], [3], 'yard', 'yards' );\n  uc.addGroup( 5280,  'ft',   ['mi', 'mile', 'miles'], [2, 3, 4, 5, 6, 7, 8, 9, 10], 'mile', 'miles' );\n  uc.addGroup( 3,     'mi',   ['league', 'leagues'], [2, 3, 4, 5, 6, 7, 8, 9, 10], 'league', 'leagues' );\n\n  uc.addGroup( 1,     null,   ['mm', 'millimeter', 'millimeters'], [10], 'millimeter', 'millimeters' );\n  uc.addGroup( 10,    'mm',   ['cm', 'centimeter', 'centimeters'], [2, 4, 10], 'centimeter', 'centimeters' );\n  uc.addGroup( 10,    'cm',   ['dc', 'decimeter', 'decimeters'], [10], 'decimeter', 'decimeters' );\n  uc.addGroup( 100,   'cm',   ['m', 'meter', 'meters'], [2, 3, 4, 5, 10], 'meter', 'meters' );\n  uc.addGroup( 1000,  'm',    ['km', 'kilometer', 'kilometers'], [2, 3, 4, 5, 6, 7, 8, 9, 10], 'kilometer', 'kilometers' );\n\n  uc.addBaseConversion('in', 'mm', 25.4);\n\n  return uc;\n\n})());\n\n\naddClass((function generateVolumeClass()\n{\n  var uc = new UnitzClass( 'Rotation' );\n\n  uc.addGroup( 1,     null,    ['deg', 'degs', 'degree', 'degrees'], [], 'degree', 'degrees' );\n  uc.addGroup( 1,     null,    ['rad', 'rads', 'radian', 'radians'], [], 'radian', 'radians' );\n\n  uc.addBaseConversion( 'deg', 'rad', 0.0174533 );\n\n  return uc;\n\n})());\n\n\naddClass((function generateTimeClass()\n{\n  var uc = new UnitzClass( 'Time' );\n\n  uc.addGroup( 1,         null,     ['ns', 'nanosecond', 'nanoseconds', 'nano', 'nanos'], [10, 100], 'nanosecond', 'nanoseconds' );\n  uc.addGroup( 1000,      'ns',     ['us', 'microsecond', 'microseconds', 'micros', 'micro'], [10, 100, 1000], 'microsecond', 'microseconds' );\n  uc.addGroup( 1000,      'us',     ['ms', 'millisecond', 'milliseconds', 'millis'], [10, 100, 1000], 'millisecond', 'milliseconds' );\n  uc.addGroup( 1000,      'ms',     ['s', 'second', 'seconds', 'sec', 'secs'], [2, 10, 100, 1000], 'second', 'seconds' );\n  uc.addGroup( 60,        's',      ['min', 'minute', 'minutes', 'mins'], [2, 3, 4, 60], 'minute', 'minutes' );\n  uc.addGroup( 60,        'min',    ['hr', 'hour', 'hours', 'hrs'], [2, 3, 4, 60], 'hour', 'hours' );\n  uc.addGroup( 24,        'hr',     ['day', 'days'], [2, 3, 4, 6, 24], 'day', 'days' );\n  uc.addGroup( 7,         'day',    ['wk', 'week', 'weeks', 'wks'], [7], 'week', 'weeks' );\n  uc.addGroup( 365.2425,  'day',    ['yr', 'year', 'years', 'yrs'], [2, 3, 4, 6, 12, 52], 'year', 'years' );\n\n  return uc;\n\n})());\n\n\naddClass((function generateVolumeClass()\n{\n  var uc = new UnitzClass( 'Volume' );\n\n  uc.addGroup( 1,     null,   ['tsp', 'ts', 'tsps', 'teaspoon', 'teaspoons'], [2, 3, 4], 'teaspoon', 'teaspoons' );\n  uc.addGroup( 3,     'tsp',  ['tbsp', 'tbsps', 'tablespoon', 'tablespoons'], [2, 3, 4], 'tablespoon', 'tablespoons' );\n  uc.addGroup( 6,     'tsp',  ['oz', 'ounce', 'ounces', 'fl-oz', 'fl oz', 'floz', 'fluid ounce', 'fl. oz.', 'oz. fl.', 'oz fl'], [2, 3, 6], 'fluid ounce', 'fluid ounces' );\n  uc.addGroup( 8,     'oz',   ['c', 'cup', 'cups'], [2, 3, 4], 'cup', 'cups' );\n  uc.addGroup( 2,     'c',    ['pt', 'pint', 'pints'], [2, 4, 8], 'pint', 'pints' );\n  uc.addGroup( 4,     'c',    ['qt', 'quart', 'quarts'], [2, 4, 8], 'quart', 'quarts' );\n  uc.addGroup( 4,     'qt',   ['gal', 'gallon', 'gallons'], [2, 4, 8, 16], 'gallon', 'gallons' );\n\n  uc.addGroup( 1,     null,   ['ml', 'millilitre', 'millilitres', 'milliliter', 'milliliters'], [2, 10], 'milliliter', 'milliliters' );\n  uc.addGroup( 10,    'ml',   ['cl', 'centilitre', 'centilitres', 'centiliter', 'centiliters'], [10], 'centiliter', 'centiliters' );\n  uc.addGroup( 1000,  'ml',   ['l', 'litre', 'litres', 'liter', 'liters'], [2, 3, 4, 10], 'liter', 'liters' );\n  uc.addGroup( 10,    'l',    ['dl', 'decalitre', 'decalitres', 'decaliter', 'decaliters'], [10, 100], 'decaliter', 'decaliters' );\n  uc.addGroup( 1000,  'l',    ['kl', 'kilolitre', 'kilolitres', 'kiloliter', 'kiloliters'], [10, 100], 'kiloliter', 'kiloliters' );\n\n  uc.addGroup( 1,     null,   ['mm3', 'mm^3', 'cubic mm', 'cubic millimeter', 'cubic millimeters'], [2, 4, 8], 'cubic millimeter', 'cubic millimeters' );\n  uc.addGroup( 1000,  'mm3',  ['cm3', 'cm^3', 'cubiccmm', 'cubic centimeter', 'cubic centimeters'], [2, 4, 8], 'cubic centimeter', 'cubic centimeters' );\n  uc.addGroup( 1000000, 'cm3', ['m3', 'm^3', 'cubic m', 'cubic meter', 'cubic meters'], [2, 4, 8], 'cubic meter', 'cubic meters' );\n  uc.addGroup( 1000000000, 'm3', ['km3', 'km^3', 'cubic km', 'meter', 'meters'], [2, 4, 8], 'meter', 'meters' );\n\n  uc.addGroup( 1,     null,   ['in3', 'in^3', 'cubic in', 'cubic inch', 'cubic inches'], [2, 4, 8], 'cubic inch', 'cubic inches' );\n  uc.addGroup( 1728,  'in3',  ['ft3', 'ft^3', 'cubic ft', 'cubic foot', 'cubic feet'], [2, 4, 8], 'cubic foot', 'cubic feet' );\n  uc.addGroup( 27,    'ft3',  ['yd3', 'yd^3', 'cubic yd', 'cubic yard', 'cubic yards'], [2, 4, 8], 'cubic yard', 'cubic yards' );\n\n  uc.addBaseConversion( 'tsp', 'ml', 4.92892 );\n  uc.addBaseConversion( 'ml', 'mm3', 1 );\n  uc.addBaseConversion( 'tsp', 'in3', 0.300781 );\n\n  return uc;\n\n})());\n\n\naddClass((function generateWeightClass()\n{\n  var uc = new UnitzClass( 'Weight' );\n\n  uc.addGroup( 1,       null,     ['mg', 'milligram', 'milligrams'], [2, 10], 'milligram', 'milligrams' );\n  uc.addGroup( 1000,    'mg',     ['g', 'gram', 'grams'], [2, 10, 100], 'gram', 'grams' );\n  uc.addGroup( 1000,    'g',      ['kg', 'kilogram', 'kilograms', 'kilo', 'kilos'], [2, 10, 100], 'kilogram', 'kilograms' );\n\n  uc.addGroup( 1,       null,     ['oz', 'ounce', 'ounces'], [2, 3, 4, 16], 'ounce', 'ounces' );\n  uc.addGroup( 16,      'oz',     ['lb', 'lbs', 'pound', 'pounds'], [2, 3, 4, 16], 'pound', 'pounds' );\n  uc.addGroup( 2000,    'lb',     ['ton', 'tons', 'tonnes'], [2, 3, 4, 10], 'ton', 'tons' );\n\n  uc.addBaseConversion( 'mg', 'oz', 0.000035274 );\n\n  return uc;\n\n})());\n\n\n  Unitz.classes = classes;\n  Unitz.classMap = classMap;\n  Unitz.unitToClass = unitToClass;\n  Unitz.regex = /^\\s*(-?\\d*)(\\s+(\\d+))?(\\/(\\d+)|\\.(\\d+)|)\\s*(.*)\\s*$/i;\n  Unitz.epsilon = 0.001;\n  Unitz.separator = ',';\n  Unitz.separatorJoin = ', ';\n  Unitz.heuristicLength = 3;\n\n  Unitz.parse = parse;\n  Unitz.parseInput = parseInput;\n  Unitz.convert = convert;\n  Unitz.best = best;\n  Unitz.splitInput = splitInput;\n  Unitz.combine = combine;\n  Unitz.subtract = subtract;\n  Unitz.compound = compound;\n  Unitz.isHeuristicMatch = isHeuristicMatch;\n  Unitz.conversions = conversions;\n  Unitz.isSingular = isSingular;\n  Unitz.isWhole = isWhole;\n  Unitz.findUnit = findUnit;\n  Unitz.addClass = addClass;\n  Unitz.removeUnit = removeUnit;\n  Unitz.removeGroup = removeGroup;\n\n  Unitz.Class = UnitzClass;\n  Unitz.Group = UnitzGroup;\n  Unitz.Parsed = UnitzParsed;\n  Unitz.Fraction = UnitzFraction;\n\n  return Unitz;\n\n}));\n"],"sourceRoot":"/source/"}